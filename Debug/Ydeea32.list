
Ydeea32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e4  080087e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087ec  080087ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087ec  080087ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080087f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a0fc  20000010  08008804  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a10c  08008804  0002a10c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1c0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003427  00000000  00000000  0003a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226bb  00000000  00000000  0003fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b0f  00000000  00000000  00062593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ec2  00000000  00000000  0007a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ff64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  0014ffb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008654 	.word	0x08008654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008654 	.word	0x08008654

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <calcStateMachine>:
//	STATE = stateInit;
//}

/*===== State machine implemented to be able to do tasks in a certain order easier =====*/
void calcStateMachine(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	switch (STATE)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <calcStateMachine+0x54>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d016      	beq.n	8000e9e <calcStateMachine+0x3a>
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	dc16      	bgt.n	8000ea2 <calcStateMachine+0x3e>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <calcStateMachine+0x1a>
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d008      	beq.n	8000e8e <calcStateMachine+0x2a>
			if (okToLeaveState) STATE = stateRunning;
			break;
		case stateRunning:
			break;
		default:
			break;
 8000e7c:	e011      	b.n	8000ea2 <calcStateMachine+0x3e>
			if (okToLeaveState) STATE = stateCalibration;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <calcStateMachine+0x58>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00f      	beq.n	8000ea6 <calcStateMachine+0x42>
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <calcStateMachine+0x54>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
			break;
 8000e8c:	e00b      	b.n	8000ea6 <calcStateMachine+0x42>
			if (okToLeaveState) STATE = stateRunning;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <calcStateMachine+0x58>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d009      	beq.n	8000eaa <calcStateMachine+0x46>
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <calcStateMachine+0x54>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	701a      	strb	r2, [r3, #0]
			break;
 8000e9c:	e005      	b.n	8000eaa <calcStateMachine+0x46>
			break;
 8000e9e:	bf00      	nop
 8000ea0:	e004      	b.n	8000eac <calcStateMachine+0x48>
			break;
 8000ea2:	bf00      	nop
 8000ea4:	e002      	b.n	8000eac <calcStateMachine+0x48>
			break;
 8000ea6:	bf00      	nop
 8000ea8:	e000      	b.n	8000eac <calcStateMachine+0x48>
			break;
 8000eaa:	bf00      	nop
	}
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000034 	.word	0x20000034
 8000ebc:	20006b10 	.word	0x20006b10

08000ec0 <calcActualAngle>:
	}
}

/*===== Algorithm for calculation of the actual angle of the aircraft based on information from sensors =====*/
void calcActualAngle(void)
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
#endif
	static double accXAngle_deg;
	static double accYAngle_deg;

	/*first read 5 samples to fill the buffer*/
	if(STATE == stateInit)
 8000ec6:	4ba8      	ldr	r3, [pc, #672]	; (8001168 <calcActualAngle+0x2a8>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <calcActualAngle+0x22>
	{
		//(void)HAL_GET_GYRO_DATA_IF(&GYRO_DATA);
		(void)HAL_GET_GYRO_RAW_DATA_IF(&GET_GYRO_RAW_DATA); /*call here the function to fill the gyro raw data buffer*/
 8000ece:	48a7      	ldr	r0, [pc, #668]	; (800116c <calcActualAngle+0x2ac>)
 8000ed0:	f001 fab2 	bl	8002438 <HAL_GET_GYRO_RAW_DATA_IF>
		(void)HAL_GET_ACC_DATA_IF(&ACCELERATION_DATA);
 8000ed4:	48a6      	ldr	r0, [pc, #664]	; (8001170 <calcActualAngle+0x2b0>)
 8000ed6:	f001 facb 	bl	8002470 <HAL_GET_ACC_DATA_IF>
#if (USE_SMOOTHING_FILTER == 1)
		if(AccQueueIndex == 5)
		{
#endif
			okToLeaveState = 1;
 8000eda:	4ba6      	ldr	r3, [pc, #664]	; (8001174 <calcActualAngle+0x2b4>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
		}
		rollAngleError = desiredRollAngle - actualRollAngle;
		pitchAngleError = desiredPitchAngle - actualPitchAngle;
	    yawRateError = desiredYawRate - actualRawYawRate;
	}
}
 8000ee0:	e1ac      	b.n	800123c <calcActualAngle+0x37c>
	else if(STATE == stateCalibration)
 8000ee2:	4ba1      	ldr	r3, [pc, #644]	; (8001168 <calcActualAngle+0x2a8>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d138      	bne.n	8000f5c <calcActualAngle+0x9c>
		if(HAL_GET_ACC_DATA_IF(&ACCELERATION_DATA) == E_OK)
 8000eea:	48a1      	ldr	r0, [pc, #644]	; (8001170 <calcActualAngle+0x2b0>)
 8000eec:	f001 fac0 	bl	8002470 <HAL_GET_ACC_DATA_IF>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	f040 81a2 	bne.w	800123c <calcActualAngle+0x37c>
			accXAngle = ACCELERATION_DATA.ACCELERATIO_AXIS_X[0];
 8000ef8:	4b9d      	ldr	r3, [pc, #628]	; (8001170 <calcActualAngle+0x2b0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a9e      	ldr	r2, [pc, #632]	; (8001178 <calcActualAngle+0x2b8>)
 8000efe:	6013      	str	r3, [r2, #0]
			accYAngle = ACCELERATION_DATA.ACCELERATIO_AXIS_Y[0];
 8000f00:	4b9b      	ldr	r3, [pc, #620]	; (8001170 <calcActualAngle+0x2b0>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4a9d      	ldr	r2, [pc, #628]	; (800117c <calcActualAngle+0x2bc>)
 8000f06:	6013      	str	r3, [r2, #0]
			actualPitchAngle = (accXAngle * 57.3); /* 57.3 == 3.14159 * 180 */
 8000f08:	4b9b      	ldr	r3, [pc, #620]	; (8001178 <calcActualAngle+0x2b8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fac3 	bl	8000498 <__aeabi_f2d>
 8000f12:	a38f      	add	r3, pc, #572	; (adr r3, 8001150 <calcActualAngle+0x290>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb16 	bl	8000548 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fdd2 	bl	8000acc <__aeabi_d2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a95      	ldr	r2, [pc, #596]	; (8001180 <calcActualAngle+0x2c0>)
 8000f2c:	6013      	str	r3, [r2, #0]
			actualRollAngle = (accYAngle * 57.3); /* 57.3 == 3.14159 * 180 */
 8000f2e:	4b93      	ldr	r3, [pc, #588]	; (800117c <calcActualAngle+0x2bc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fab0 	bl	8000498 <__aeabi_f2d>
 8000f38:	a385      	add	r3, pc, #532	; (adr r3, 8001150 <calcActualAngle+0x290>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff fb03 	bl	8000548 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fdbf 	bl	8000acc <__aeabi_d2f>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a8c      	ldr	r2, [pc, #560]	; (8001184 <calcActualAngle+0x2c4>)
 8000f52:	6013      	str	r3, [r2, #0]
			okToLeaveState = 1;
 8000f54:	4b87      	ldr	r3, [pc, #540]	; (8001174 <calcActualAngle+0x2b4>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	e16f      	b.n	800123c <calcActualAngle+0x37c>
	else if(STATE == stateRunning)
 8000f5c:	4b82      	ldr	r3, [pc, #520]	; (8001168 <calcActualAngle+0x2a8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	f040 816b 	bne.w	800123c <calcActualAngle+0x37c>
		if(HAL_GET_ACC_DATA_IF(&ACCELERATION_DATA) == E_OK)
 8000f66:	4882      	ldr	r0, [pc, #520]	; (8001170 <calcActualAngle+0x2b0>)
 8000f68:	f001 fa82 	bl	8002470 <HAL_GET_ACC_DATA_IF>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d125      	bne.n	8000fbe <calcActualAngle+0xfe>
			accXAngle = ACCELERATION_DATA.ACCELERATIO_AXIS_X[0];
 8000f72:	4b7f      	ldr	r3, [pc, #508]	; (8001170 <calcActualAngle+0x2b0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a80      	ldr	r2, [pc, #512]	; (8001178 <calcActualAngle+0x2b8>)
 8000f78:	6013      	str	r3, [r2, #0]
			accYAngle = ACCELERATION_DATA.ACCELERATIO_AXIS_Y[0];
 8000f7a:	4b7d      	ldr	r3, [pc, #500]	; (8001170 <calcActualAngle+0x2b0>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a7f      	ldr	r2, [pc, #508]	; (800117c <calcActualAngle+0x2bc>)
 8000f80:	6013      	str	r3, [r2, #0]
			accXAngle_deg = (accXAngle * 57.3); /* 57.3 == 3.14159 * 180 */
 8000f82:	4b7d      	ldr	r3, [pc, #500]	; (8001178 <calcActualAngle+0x2b8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa86 	bl	8000498 <__aeabi_f2d>
 8000f8c:	a370      	add	r3, pc, #448	; (adr r3, 8001150 <calcActualAngle+0x290>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff fad9 	bl	8000548 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	497b      	ldr	r1, [pc, #492]	; (8001188 <calcActualAngle+0x2c8>)
 8000f9c:	e9c1 2300 	strd	r2, r3, [r1]
			accYAngle_deg = (accYAngle * 57.3); /* 57.3 == 3.14159 * 180 */
 8000fa0:	4b76      	ldr	r3, [pc, #472]	; (800117c <calcActualAngle+0x2bc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa77 	bl	8000498 <__aeabi_f2d>
 8000faa:	a369      	add	r3, pc, #420	; (adr r3, 8001150 <calcActualAngle+0x290>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff faca 	bl	8000548 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4974      	ldr	r1, [pc, #464]	; (800118c <calcActualAngle+0x2cc>)
 8000fba:	e9c1 2300 	strd	r2, r3, [r1]
		if(HAL_GET_GYRO_RAW_DATA_IF(&GET_GYRO_RAW_DATA) == E_OK)
 8000fbe:	486b      	ldr	r0, [pc, #428]	; (800116c <calcActualAngle+0x2ac>)
 8000fc0:	f001 fa3a 	bl	8002438 <HAL_GET_GYRO_RAW_DATA_IF>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	f040 8105 	bne.w	80011d6 <calcActualAngle+0x316>
			actualPitchAngle = (float)((0.9)*(actualPitchAngle + (float)(GET_GYRO_RAW_DATA.GET_GYRO_RAW_X_ANGLE_VEL[0]/200000)) + (0.1)*accXAngle_deg);
 8000fcc:	4b67      	ldr	r3, [pc, #412]	; (800116c <calcActualAngle+0x2ac>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001190 <calcActualAngle+0x2d0>
 8000fd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fda:	4b69      	ldr	r3, [pc, #420]	; (8001180 <calcActualAngle+0x2c0>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	ee17 0a90 	vmov	r0, s15
 8000fe8:	f7ff fa56 	bl	8000498 <__aeabi_f2d>
 8000fec:	a35a      	add	r3, pc, #360	; (adr r3, 8001158 <calcActualAngle+0x298>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff faa9 	bl	8000548 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	4b62      	ldr	r3, [pc, #392]	; (8001188 <calcActualAngle+0x2c8>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	a356      	add	r3, pc, #344	; (adr r3, 8001160 <calcActualAngle+0x2a0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fa9d 	bl	8000548 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4620      	mov	r0, r4
 8001014:	4629      	mov	r1, r5
 8001016:	f7ff f8e1 	bl	80001dc <__adddf3>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd53 	bl	8000acc <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	4a55      	ldr	r2, [pc, #340]	; (8001180 <calcActualAngle+0x2c0>)
 800102a:	6013      	str	r3, [r2, #0]
			actualRollAngle = (0.9)*(actualRollAngle + (float)(GET_GYRO_RAW_DATA.GET_GYRO_RAW_Y_ANGLE_VEL[0]/200000)) + (0.1)*accYAngle_deg;
 800102c:	4b4f      	ldr	r3, [pc, #316]	; (800116c <calcActualAngle+0x2ac>)
 800102e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001032:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001190 <calcActualAngle+0x2d0>
 8001036:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <calcActualAngle+0x2c4>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	ee17 0a90 	vmov	r0, s15
 8001048:	f7ff fa26 	bl	8000498 <__aeabi_f2d>
 800104c:	a342      	add	r3, pc, #264	; (adr r3, 8001158 <calcActualAngle+0x298>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa79 	bl	8000548 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4614      	mov	r4, r2
 800105c:	461d      	mov	r5, r3
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <calcActualAngle+0x2cc>)
 8001060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001064:	a33e      	add	r3, pc, #248	; (adr r3, 8001160 <calcActualAngle+0x2a0>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4620      	mov	r0, r4
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff f8b1 	bl	80001dc <__adddf3>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd23 	bl	8000acc <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a3e      	ldr	r2, [pc, #248]	; (8001184 <calcActualAngle+0x2c4>)
 800108a:	6013      	str	r3, [r2, #0]
			actualRawYawRate = GET_GYRO_RAW_DATA.GET_GYRO_RAW_Z_ANGLE_VEL[0];
 800108c:	4b37      	ldr	r3, [pc, #220]	; (800116c <calcActualAngle+0x2ac>)
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	4a40      	ldr	r2, [pc, #256]	; (8001194 <calcActualAngle+0x2d4>)
 8001092:	6013      	str	r3, [r2, #0]
			if(actualPitchAngle> 0)
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <calcActualAngle+0x2c0>)
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	dd1a      	ble.n	80010da <calcActualAngle+0x21a>
				Orange = ((unsigned char)actualPitchAngle / 5);
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <calcActualAngle+0x2c0>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80010b2:	793b      	ldrb	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4a38      	ldr	r2, [pc, #224]	; (8001198 <calcActualAngle+0x2d8>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <calcActualAngle+0x2dc>)
 80010c2:	701a      	strb	r2, [r3, #0]
				Blue = 0;
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <calcActualAngle+0x2e0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
				if (Orange > 10) Orange = 10;
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <calcActualAngle+0x2dc>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	d918      	bls.n	8001104 <calcActualAngle+0x244>
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <calcActualAngle+0x2dc>)
 80010d4:	220a      	movs	r2, #10
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e014      	b.n	8001104 <calcActualAngle+0x244>
				Blue = ((unsigned char)((-actualPitchAngle)) / 5);
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <calcActualAngle+0x2c0>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eef1 7a67 	vneg.f32	s15, s15
 80010e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <calcActualAngle+0x2d8>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <calcActualAngle+0x2e0>)
 80010fc:	701a      	strb	r2, [r3, #0]
				Orange = 0;
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <calcActualAngle+0x2dc>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
			if(actualRollAngle> 0)
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <calcActualAngle+0x2c4>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	dd4b      	ble.n	80011ac <calcActualAngle+0x2ec>
				Green = ((unsigned char)actualRollAngle / 5);
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <calcActualAngle+0x2c4>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001122:	793b      	ldrb	r3, [r7, #4]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <calcActualAngle+0x2d8>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <calcActualAngle+0x2e4>)
 8001132:	701a      	strb	r2, [r3, #0]
				Red = 0;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <calcActualAngle+0x2e8>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
				if (Green > 10) Green = 10;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <calcActualAngle+0x2e4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d949      	bls.n	80011d6 <calcActualAngle+0x316>
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <calcActualAngle+0x2e4>)
 8001144:	220a      	movs	r2, #10
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e045      	b.n	80011d6 <calcActualAngle+0x316>
 800114a:	bf00      	nop
 800114c:	f3af 8000 	nop.w
 8001150:	66666666 	.word	0x66666666
 8001154:	404ca666 	.word	0x404ca666
 8001158:	cccccccd 	.word	0xcccccccd
 800115c:	3feccccc 	.word	0x3feccccc
 8001160:	9999999a 	.word	0x9999999a
 8001164:	3fb99999 	.word	0x3fb99999
 8001168:	20000034 	.word	0x20000034
 800116c:	20006b6c 	.word	0x20006b6c
 8001170:	20006bc4 	.word	0x20006bc4
 8001174:	20006b10 	.word	0x20006b10
 8001178:	2000002c 	.word	0x2000002c
 800117c:	20000030 	.word	0x20000030
 8001180:	20006bbc 	.word	0x20006bbc
 8001184:	20006bac 	.word	0x20006bac
 8001188:	20000038 	.word	0x20000038
 800118c:	20000040 	.word	0x20000040
 8001190:	48435000 	.word	0x48435000
 8001194:	20006b50 	.word	0x20006b50
 8001198:	cccccccd 	.word	0xcccccccd
 800119c:	20006b68 	.word	0x20006b68
 80011a0:	20006b58 	.word	0x20006b58
 80011a4:	20006bc0 	.word	0x20006bc0
 80011a8:	20006bb8 	.word	0x20006bb8
				Red = ((unsigned char)((-actualRollAngle)) / 5);
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <calcActualAngle+0x384>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	eef1 7a67 	vneg.f32	s15, s15
 80011b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80011be:	793b      	ldrb	r3, [r7, #4]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4a21      	ldr	r2, [pc, #132]	; (8001248 <calcActualAngle+0x388>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <calcActualAngle+0x38c>)
 80011ce:	701a      	strb	r2, [r3, #0]
				Green = 0;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <calcActualAngle+0x390>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
		rollAngleError = desiredRollAngle - actualRollAngle;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <calcActualAngle+0x394>)
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <calcActualAngle+0x384>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e6:	ee17 0a90 	vmov	r0, s15
 80011ea:	f7ff f955 	bl	8000498 <__aeabi_f2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4919      	ldr	r1, [pc, #100]	; (8001258 <calcActualAngle+0x398>)
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
		pitchAngleError = desiredPitchAngle - actualPitchAngle;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <calcActualAngle+0x39c>)
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <calcActualAngle+0x3a0>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001208:	ee17 0a90 	vmov	r0, s15
 800120c:	f7ff f944 	bl	8000498 <__aeabi_f2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4913      	ldr	r1, [pc, #76]	; (8001264 <calcActualAngle+0x3a4>)
 8001216:	e9c1 2300 	strd	r2, r3, [r1]
	    yawRateError = desiredYawRate - actualRawYawRate;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <calcActualAngle+0x3a8>)
 800121c:	ed93 7a00 	vldr	s14, [r3]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <calcActualAngle+0x3ac>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	ee17 0a90 	vmov	r0, s15
 800122e:	f7ff f933 	bl	8000498 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <calcActualAngle+0x3b0>)
 8001238:	e9c1 2300 	strd	r2, r3, [r1]
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bdb0      	pop	{r4, r5, r7, pc}
 8001244:	20006bac 	.word	0x20006bac
 8001248:	cccccccd 	.word	0xcccccccd
 800124c:	20006bb8 	.word	0x20006bb8
 8001250:	20006bc0 	.word	0x20006bc0
 8001254:	20006b54 	.word	0x20006b54
 8001258:	20006b60 	.word	0x20006b60
 800125c:	20006ba8 	.word	0x20006ba8
 8001260:	20006bbc 	.word	0x20006bbc
 8001264:	20006bb0 	.word	0x20006bb0
 8001268:	20006b5c 	.word	0x20006b5c
 800126c:	20006b50 	.word	0x20006b50
 8001270:	20006c18 	.word	0x20006c18

08001274 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <vApplicationGetIdleTaskMemory+0x30>)
 800128a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000048 	.word	0x20000048
 80012a4:	2000009c 	.word	0x2000009c

080012a8 <rcCompleteCbk>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
pUART_CallbackTypeDef rcCompleteCbk(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	/*well, do something!!!! :)*/;
}
 80012ac:	bf00      	nop
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b0bc      	sub	sp, #240	; 0xf0
 80012bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012be:	f001 fb7b 	bl	80029b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c2:	f000 f8e1 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c6:	f000 fa73 	bl	80017b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ca:	f000 f945 	bl	8001558 <MX_I2C1_Init>
  MX_UART4_Init();
 80012ce:	f000 fa19 	bl	8001704 <MX_UART4_Init>
  MX_TIM3_Init();
 80012d2:	f000 f96f 	bl	80015b4 <MX_TIM3_Init>
  MX_UART5_Init();
 80012d6:	f000 fa41 	bl	800175c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  firstRun = 1;
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <main+0x17c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
  HAL_UART_RegisterCallback(&huart5, HAL_UART_RX_COMPLETE_CB_ID, *rcCompleteCbk);
 80012e0:	4a55      	ldr	r2, [pc, #340]	; (8001438 <main+0x180>)
 80012e2:	2103      	movs	r1, #3
 80012e4:	4855      	ldr	r0, [pc, #340]	; (800143c <main+0x184>)
 80012e6:	f004 fbe7 	bl	8005ab8 <HAL_UART_RegisterCallback>
  //(void)HAL_I2C_Mem_Write(&hi2c1, 0xA6, 0x2D, 1, &AccResetVal, 1, 100);
  /*ReBOOT the gyroscope at startup to clear previous initializations*/
  (void)HAL_I2C_Mem_Write(&hi2c1, 0xD2, 0x24, 1, &GyroResetVal, 1, 100);
 80012ea:	2364      	movs	r3, #100	; 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <main+0x188>)
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	2224      	movs	r2, #36	; 0x24
 80012fa:	21d2      	movs	r1, #210	; 0xd2
 80012fc:	4851      	ldr	r0, [pc, #324]	; (8001444 <main+0x18c>)
 80012fe:	f002 f80b 	bl	8003318 <HAL_I2C_Mem_Write>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <main+0x190>)
 8001304:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001308:	461d      	mov	r5, r3
 800130a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001316:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f005 fc9a 	bl	8006c56 <osThreadCreate>
 8001322:	4603      	mov	r3, r0
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <main+0x194>)
 8001326:	6013      	str	r3, [r2, #0]

  /* definition and creation of testTask10ms */
  osThreadStaticDef(testTask10ms, Main_10ms, osPriorityNormal, 0, 128, testTask10msBuffer, &testTask10msControlBlock);
 8001328:	4b49      	ldr	r3, [pc, #292]	; (8001450 <main+0x198>)
 800132a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800132e:	461d      	mov	r5, r3
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTask10msHandle = osThreadCreate(osThread(testTask10ms), NULL);
 800133c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fc87 	bl	8006c56 <osThreadCreate>
 8001348:	4603      	mov	r3, r0
 800134a:	4a42      	ldr	r2, [pc, #264]	; (8001454 <main+0x19c>)
 800134c:	6013      	str	r3, [r2, #0]

  /* definition and creation of IdleTask */
  osThreadDef(IdleTask, IdleTask_func, osPriorityIdle, 0, 128);
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <main+0x1a0>)
 8001350:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001354:	461d      	mov	r5, r3
 8001356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800135e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IdleTaskHandle = osThreadCreate(osThread(IdleTask), NULL);
 8001362:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f005 fc74 	bl	8006c56 <osThreadCreate>
 800136e:	4603      	mov	r3, r0
 8001370:	4a3a      	ldr	r2, [pc, #232]	; (800145c <main+0x1a4>)
 8001372:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorInputTask */
  osThreadDef(SensorInputTask, SensorInputTask_func, osPriorityHigh, 0, 3000);
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <main+0x1a8>)
 8001376:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorInputTaskHandle = osThreadCreate(osThread(SensorInputTask), NULL);
 8001388:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f005 fc61 	bl	8006c56 <osThreadCreate>
 8001394:	4603      	mov	r3, r0
 8001396:	4a33      	ldr	r2, [pc, #204]	; (8001464 <main+0x1ac>)
 8001398:	6013      	str	r3, [r2, #0]

  /* definition and creation of AttitudeCalc */
  osThreadStaticDef(AttitudeCalc, AttitudeCalc_func, osPriorityAboveNormal, 0, 3000, AttitudeCalcBuffer, &AttitudeCalcControlBlock);
 800139a:	4b33      	ldr	r3, [pc, #204]	; (8001468 <main+0x1b0>)
 800139c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013a0:	461d      	mov	r5, r3
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AttitudeCalcHandle = osThreadCreate(osThread(AttitudeCalc), NULL);
 80013ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fc4e 	bl	8006c56 <osThreadCreate>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a2b      	ldr	r2, [pc, #172]	; (800146c <main+0x1b4>)
 80013be:	6013      	str	r3, [r2, #0]

  /* definition and creation of telemetryTask */
  osThreadDef(telemetryTask, telemetryTask_func, osPriorityLow, 0, 512);
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <main+0x1b8>)
 80013c2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013c6:	461d      	mov	r5, r3
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemetryTaskHandle = osThreadCreate(osThread(telemetryTask), NULL);
 80013d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fc3b 	bl	8006c56 <osThreadCreate>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <main+0x1bc>)
 80013e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of OutputTask */
  osThreadDef(OutputTask, OutputTask_Main, osPriorityAboveNormal, 0, 2400);
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <main+0x1c0>)
 80013e8:	f107 041c 	add.w	r4, r7, #28
 80013ec:	461d      	mov	r5, r3
 80013ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OutputTaskHandle = osThreadCreate(osThread(OutputTask), NULL);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f005 fc28 	bl	8006c56 <osThreadCreate>
 8001406:	4603      	mov	r3, r0
 8001408:	4a1c      	ldr	r2, [pc, #112]	; (800147c <main+0x1c4>)
 800140a:	6013      	str	r3, [r2, #0]

  /* definition and creation of rcInputTask */
  osThreadDef(rcInputTask, rcInputTask_func, osPriorityRealtime, 0, 128);
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <main+0x1c8>)
 800140e:	463c      	mov	r4, r7
 8001410:	461d      	mov	r5, r3
 8001412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800141a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rcInputTaskHandle = osThreadCreate(osThread(rcInputTask), NULL);
 800141e:	463b      	mov	r3, r7
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fc17 	bl	8006c56 <osThreadCreate>
 8001428:	4603      	mov	r3, r0
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <main+0x1cc>)
 800142c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800142e:	f005 fc0b 	bl	8006c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001432:	e7fe      	b.n	8001432 <main+0x17a>
 8001434:	20009da4 	.word	0x20009da4
 8001438:	080012a9 	.word	0x080012a9
 800143c:	20006d04 	.word	0x20006d04
 8001440:	080087c9 	.word	0x080087c9
 8001444:	20006c34 	.word	0x20006c34
 8001448:	080086dc 	.word	0x080086dc
 800144c:	20006c20 	.word	0x20006c20
 8001450:	080086f8 	.word	0x080086f8
 8001454:	20009d8c 	.word	0x20009d8c
 8001458:	08008714 	.word	0x08008714
 800145c:	20006cb4 	.word	0x20006cb4
 8001460:	08008730 	.word	0x08008730
 8001464:	20009fa8 	.word	0x20009fa8
 8001468:	0800874c 	.word	0x0800874c
 800146c:	20006e24 	.word	0x20006e24
 8001470:	08008768 	.word	0x08008768
 8001474:	20009d10 	.word	0x20009d10
 8001478:	08008784 	.word	0x08008784
 800147c:	20006e28 	.word	0x20006e28
 8001480:	080087a0 	.word	0x080087a0
 8001484:	20009da0 	.word	0x20009da0

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	; 0x50
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	2230      	movs	r2, #48	; 0x30
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f007 f8d4 	bl	8008644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <SystemClock_Config+0xc8>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <SystemClock_Config+0xc8>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <SystemClock_Config+0xc8>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <SystemClock_Config+0xcc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <SystemClock_Config+0xcc>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <SystemClock_Config+0xcc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014fc:	2348      	movs	r3, #72	; 0x48
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001504:	2303      	movs	r3, #3
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fd7f 	bl	8004010 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001518:	f000 fc62 	bl	8001de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	2102      	movs	r1, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f002 ffe1 	bl	8004500 <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001544:	f000 fc4c 	bl	8001de0 <Error_Handler>
  }
}
 8001548:	bf00      	nop
 800154a:	3750      	adds	r7, #80	; 0x50
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C1_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MX_I2C1_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001596:	f001 fd7b 	bl	8003090 <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 fc1e 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20006c34 	.word	0x20006c34
 80015ac:	40005400 	.word	0x40005400
 80015b0:	000186a0 	.word	0x000186a0

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <MX_TIM3_Init+0x148>)
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <MX_TIM3_Init+0x14c>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <MX_TIM3_Init+0x148>)
 80015ec:	2248      	movs	r2, #72	; 0x48
 80015ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80015f0:	4b42      	ldr	r3, [pc, #264]	; (80016fc <MX_TIM3_Init+0x148>)
 80015f2:	2210      	movs	r2, #16
 80015f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <MX_TIM3_Init+0x148>)
 80015f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <MX_TIM3_Init+0x148>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001604:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <MX_TIM3_Init+0x148>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800160a:	483c      	ldr	r0, [pc, #240]	; (80016fc <MX_TIM3_Init+0x148>)
 800160c:	f003 f9a6 	bl	800495c <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001616:	f000 fbe3 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	4835      	ldr	r0, [pc, #212]	; (80016fc <MX_TIM3_Init+0x148>)
 8001628:	f003 fcde 	bl	8004fe8 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001632:	f000 fbd5 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001636:	4831      	ldr	r0, [pc, #196]	; (80016fc <MX_TIM3_Init+0x148>)
 8001638:	f003 fa50 	bl	8004adc <HAL_TIM_OC_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001642:	f000 fbcd 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	4619      	mov	r1, r3
 8001654:	4829      	ldr	r0, [pc, #164]	; (80016fc <MX_TIM3_Init+0x148>)
 8001656:	f004 f8c7 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001660:	f000 fbbe 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001664:	2310      	movs	r3, #16
 8001666:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4820      	ldr	r0, [pc, #128]	; (80016fc <MX_TIM3_Init+0x148>)
 800167c:	f003 fc58 	bl	8004f30 <HAL_TIM_OC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001686:	f000 fbab 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2204      	movs	r2, #4
 800168e:	4619      	mov	r1, r3
 8001690:	481a      	ldr	r0, [pc, #104]	; (80016fc <MX_TIM3_Init+0x148>)
 8001692:	f003 fc4d 	bl	8004f30 <HAL_TIM_OC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800169c:	f000 fba0 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2208      	movs	r2, #8
 80016a4:	4619      	mov	r1, r3
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <MX_TIM3_Init+0x148>)
 80016a8:	f003 fc42 	bl	8004f30 <HAL_TIM_OC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80016b2:	f000 fb95 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	220c      	movs	r2, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <MX_TIM3_Init+0x148>)
 80016be:	f003 fc37 	bl	8004f30 <HAL_TIM_OC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80016c8:	f000 fb8a 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80016cc:	2100      	movs	r1, #0
 80016ce:	480b      	ldr	r0, [pc, #44]	; (80016fc <MX_TIM3_Init+0x148>)
 80016d0:	f003 fa5e 	bl	8004b90 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2);
 80016d4:	2104      	movs	r1, #4
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <MX_TIM3_Init+0x148>)
 80016d8:	f003 fa5a 	bl	8004b90 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 80016dc:	2108      	movs	r1, #8
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <MX_TIM3_Init+0x148>)
 80016e0:	f003 fa56 	bl	8004b90 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 80016e4:	210c      	movs	r1, #12
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_TIM3_Init+0x148>)
 80016e8:	f003 fa52 	bl	8004b90 <HAL_TIM_OC_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <MX_TIM3_Init+0x148>)
 80016ee:	f000 ff6f 	bl	80025d0 <HAL_TIM_MspPostInit>

}
 80016f2:	bf00      	nop
 80016f4:	3738      	adds	r7, #56	; 0x38
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20006cbc 	.word	0x20006cbc
 8001700:	40000400 	.word	0x40000400

08001704 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_UART4_Init+0x50>)
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_UART4_Init+0x54>)
 800170c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_UART4_Init+0x50>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_UART4_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <MX_UART4_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_UART4_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_UART4_Init+0x50>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_UART4_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_UART4_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart4, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_UART4_Init+0x50>)
 8001740:	f004 f93c 	bl	80059bc <HAL_MultiProcessor_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 800174a:	f000 fb49 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20009d18 	.word	0x20009d18
 8001758:	40004c00 	.word	0x40004c00

0800175c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_UART5_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <MX_UART5_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_UART5_Init+0x4c>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_UART5_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_UART5_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_UART5_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_UART5_Init+0x4c>)
 8001782:	2204      	movs	r2, #4
 8001784:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_UART5_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_UART5_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_UART5_Init+0x4c>)
 8001794:	f004 f8b8 	bl	8005908 <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800179e:	f000 fb1f 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20006d04 	.word	0x20006d04
 80017ac:	40005000 	.word	0x40005000

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <MX_GPIO_Init+0xec>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a33      	ldr	r2, [pc, #204]	; (800189c <MX_GPIO_Init+0xec>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <MX_GPIO_Init+0xec>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_GPIO_Init+0xec>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a2c      	ldr	r2, [pc, #176]	; (800189c <MX_GPIO_Init+0xec>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <MX_GPIO_Init+0xec>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <MX_GPIO_Init+0xec>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <MX_GPIO_Init+0xec>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <MX_GPIO_Init+0xec>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_GPIO_Init+0xec>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a1e      	ldr	r2, [pc, #120]	; (800189c <MX_GPIO_Init+0xec>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_GPIO_Init+0xec>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_GPIO_Init+0xec>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_GPIO_Init+0xec>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_GPIO_Init+0xec>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001858:	4811      	ldr	r0, [pc, #68]	; (80018a0 <MX_GPIO_Init+0xf0>)
 800185a:	f001 fbff 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800185e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	480a      	ldr	r0, [pc, #40]	; (80018a0 <MX_GPIO_Init+0xf0>)
 8001878:	f001 fa54 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_GPIO_Init+0xf4>)
 8001890:	f001 fa48 	bl	8002d24 <HAL_GPIO_Init>

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40020800 	.word	0x40020800

080018a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	static unsigned char Red1, Green1, Blue1, Orange1;
  /* Infinite loop */
  for(;;)
  {
	  /*Check the LED*/
	  if(LoopCounter == 0)
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <StartDefaultTask+0xf0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d12c      	bne.n	8001912 <StartDefaultTask+0x6a>
	  {
		  tickValOn = xTaskGetTickCount();
 80018b8:	f006 f80a 	bl	80078d0 <xTaskGetTickCount>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a37      	ldr	r2, [pc, #220]	; (800199c <StartDefaultTask+0xf4>)
 80018c0:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c8:	4835      	ldr	r0, [pc, #212]	; (80019a0 <StartDefaultTask+0xf8>)
 80018ca:	f001 fbc7 	bl	800305c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d4:	4832      	ldr	r0, [pc, #200]	; (80019a0 <StartDefaultTask+0xf8>)
 80018d6:	f001 fbc1 	bl	800305c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e0:	482f      	ldr	r0, [pc, #188]	; (80019a0 <StartDefaultTask+0xf8>)
 80018e2:	f001 fbbb 	bl	800305c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ec:	482c      	ldr	r0, [pc, #176]	; (80019a0 <StartDefaultTask+0xf8>)
 80018ee:	f001 fbb5 	bl	800305c <HAL_GPIO_WritePin>
		  Red1 = Red;
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <StartDefaultTask+0xfc>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <StartDefaultTask+0x100>)
 80018f8:	701a      	strb	r2, [r3, #0]
		  Green1 = Green;
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <StartDefaultTask+0x104>)
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <StartDefaultTask+0x108>)
 8001900:	701a      	strb	r2, [r3, #0]
		  Blue1 = Blue;
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <StartDefaultTask+0x10c>)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <StartDefaultTask+0x110>)
 8001908:	701a      	strb	r2, [r3, #0]
		  Orange1 = Orange;
 800190a:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <StartDefaultTask+0x114>)
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <StartDefaultTask+0x118>)
 8001910:	701a      	strb	r2, [r3, #0]
	  }
	  if(Red1 <= LoopCounter)
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <StartDefaultTask+0x100>)
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <StartDefaultTask+0xf0>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d805      	bhi.n	800192a <StartDefaultTask+0x82>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001924:	481e      	ldr	r0, [pc, #120]	; (80019a0 <StartDefaultTask+0xf8>)
 8001926:	f001 fb99 	bl	800305c <HAL_GPIO_WritePin>
	  }
	  if(Green1 <= LoopCounter)
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <StartDefaultTask+0x108>)
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <StartDefaultTask+0xf0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d805      	bhi.n	8001942 <StartDefaultTask+0x9a>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193c:	4818      	ldr	r0, [pc, #96]	; (80019a0 <StartDefaultTask+0xf8>)
 800193e:	f001 fb8d 	bl	800305c <HAL_GPIO_WritePin>
	  }
	  if(Blue1 <= LoopCounter)
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <StartDefaultTask+0x110>)
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <StartDefaultTask+0xf0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d805      	bhi.n	800195a <StartDefaultTask+0xb2>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001954:	4812      	ldr	r0, [pc, #72]	; (80019a0 <StartDefaultTask+0xf8>)
 8001956:	f001 fb81 	bl	800305c <HAL_GPIO_WritePin>
	  }
	  if(Orange1 <= LoopCounter)
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <StartDefaultTask+0x118>)
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <StartDefaultTask+0xf0>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d805      	bhi.n	8001972 <StartDefaultTask+0xca>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <StartDefaultTask+0xf8>)
 800196e:	f001 fb75 	bl	800305c <HAL_GPIO_WritePin>
	  }
	  if (LoopCounter==9)
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <StartDefaultTask+0xf0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b09      	cmp	r3, #9
 8001978:	d103      	bne.n	8001982 <StartDefaultTask+0xda>
	  {
		  LoopCounter = 0;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <StartDefaultTask+0xf0>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	e005      	b.n	800198e <StartDefaultTask+0xe6>
	  }
	  else
	  {
		  LoopCounter++;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <StartDefaultTask+0xf0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <StartDefaultTask+0xf0>)
 800198c:	701a      	strb	r2, [r3, #0]
	  }
	  osDelayUntil(&tickValOn, 1);
 800198e:	2101      	movs	r1, #1
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <StartDefaultTask+0xf4>)
 8001992:	f005 f9ef 	bl	8006d74 <osDelayUntil>
	  if(LoopCounter == 0)
 8001996:	e78b      	b.n	80018b0 <StartDefaultTask+0x8>
 8001998:	2000029c 	.word	0x2000029c
 800199c:	20009d14 	.word	0x20009d14
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	20006bb8 	.word	0x20006bb8
 80019a8:	2000029d 	.word	0x2000029d
 80019ac:	20006bc0 	.word	0x20006bc0
 80019b0:	2000029e 	.word	0x2000029e
 80019b4:	20006b58 	.word	0x20006b58
 80019b8:	2000029f 	.word	0x2000029f
 80019bc:	20006b68 	.word	0x20006b68
 80019c0:	200002a0 	.word	0x200002a0

080019c4 <Main_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Main_10ms */
void Main_10ms(void const * argument)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Main_10ms */
  /* Infinite loop */
  for(;;)
  {
	  if(firstRun == 1)
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <Main_10ms+0x40>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d110      	bne.n	80019f6 <Main_10ms+0x32>
	  {
		  firstRun = 0;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <Main_10ms+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
		  Init_PID = 1;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <Main_10ms+0x44>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
		  tickValOff = xTaskGetTickCount(); /*Initialize the tick counter value for task scheduling*/
 80019e0:	f005 ff76 	bl	80078d0 <xTaskGetTickCount>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <Main_10ms+0x48>)
 80019e8:	6013      	str	r3, [r2, #0]
		  osDelayUntil(&tickValOff,500); /*wait for 500ms until we call this task to switch off the LED*/
 80019ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <Main_10ms+0x48>)
 80019f0:	f005 f9c0 	bl	8006d74 <osDelayUntil>
 80019f4:	e7ea      	b.n	80019cc <Main_10ms+0x8>
	  else
	  {
		  /*Switch OFF LED*/
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		  /*set next task activation time*/
		  osDelayUntil(&tickValOff, 1000);
 80019f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <Main_10ms+0x48>)
 80019fc:	f005 f9ba 	bl	8006d74 <osDelayUntil>
	  if(firstRun == 1)
 8001a00:	e7e4      	b.n	80019cc <Main_10ms+0x8>
 8001a02:	bf00      	nop
 8001a04:	20009da4 	.word	0x20009da4
 8001a08:	2000a048 	.word	0x2000a048
 8001a0c:	20006e2c 	.word	0x20006e2c

08001a10 <IdleTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IdleTask_func */
void IdleTask_func(void const * argument)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IdleTask_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001a18:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a1c:	f005 f967 	bl	8006cee <osDelay>
 8001a20:	e7fa      	b.n	8001a18 <IdleTask_func+0x8>
	...

08001a24 <SensorInputTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorInputTask_func */
void SensorInputTask_func(void const * argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af04      	add	r7, sp, #16
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorInputTask_func */
	unsigned char sensorInput, retVal, whoAmIAcc, whoAmIGyro, retValGyro;
	static unsigned char sensorInitState = 0;

	whoAmIAcc = 0xFF;
 8001a2c:	23ff      	movs	r3, #255	; 0xff
 8001a2e:	75bb      	strb	r3, [r7, #22]
	whoAmIGyro = 0xFF;
 8001a30:	23ff      	movs	r3, #255	; 0xff
 8001a32:	757b      	strb	r3, [r7, #21]
  /* Infinite loop */
  for(;;)
  {
	  calcStateMachine();
 8001a34:	f7ff fa16 	bl	8000e64 <calcStateMachine>
	  /*Check if the correct sensors are present on IMU board*/
	  if(sensorInitState == 0)
 8001a38:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <SensorInputTask_func+0x1e0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f040 80b2 	bne.w	8001ba6 <SensorInputTask_func+0x182>
	  {
		  GYRO_DATA_STRUCT.GYRO_RAW_X_ANGLE_VEL = 0;
 8001a42:	4b71      	ldr	r3, [pc, #452]	; (8001c08 <SensorInputTask_func+0x1e4>)
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
		  GYRO_DATA_STRUCT.GYRO_X_ANGLE_TO_EARTH = 0;
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <SensorInputTask_func+0x1e4>)
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
		  GYRO_DATA_STRUCT.GYRO_RAW_Y_ANGLE_VEL = 0;
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <SensorInputTask_func+0x1e4>)
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
		  GYRO_DATA_STRUCT.GYRO_Y_ANGLE_TO_EARTH = 0;
 8001a5a:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <SensorInputTask_func+0x1e4>)
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
		  GYRO_DATA_STRUCT.GYRO_RAW_Z_ANGLE_VEL = 0;
 8001a62:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <SensorInputTask_func+0x1e4>)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
		  GYRO_DATA_STRUCT.GYRO_Z_ANGLE_TO_EARTH = 0;
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <SensorInputTask_func+0x1e4>)
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
		  retVal = HAL_I2C_Mem_Read(&hi2c1, 0xA7, 0x0, 1, &sensorInput, 1, 100);
 8001a72:	2364      	movs	r3, #100	; 0x64
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f107 0313 	add.w	r3, r7, #19
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	2200      	movs	r2, #0
 8001a84:	21a7      	movs	r1, #167	; 0xa7
 8001a86:	4861      	ldr	r0, [pc, #388]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001a88:	f001 fd40 	bl	800350c <HAL_I2C_Mem_Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	75fb      	strb	r3, [r7, #23]
		  if (retVal == 0)
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <SensorInputTask_func+0x76>
		  {
			whoAmIAcc = sensorInput;
 8001a96:	7cfb      	ldrb	r3, [r7, #19]
 8001a98:	75bb      	strb	r3, [r7, #22]
		  }

		  retVal = HAL_I2C_Mem_Read(&hi2c1, 0xD3, 0x0F, 1, &sensorInput, 1, 100);
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f107 0313 	add.w	r3, r7, #19
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	220f      	movs	r2, #15
 8001aac:	21d3      	movs	r1, #211	; 0xd3
 8001aae:	4857      	ldr	r0, [pc, #348]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001ab0:	f001 fd2c 	bl	800350c <HAL_I2C_Mem_Read>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	75fb      	strb	r3, [r7, #23]
		  if (retVal == 0)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <SensorInputTask_func+0x9e>
		  {
			  whoAmIGyro = sensorInput;
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	757b      	strb	r3, [r7, #21]
		  }

		  if ((whoAmIAcc == 0xE5) && (whoAmIGyro == 0xD3))
 8001ac2:	7dbb      	ldrb	r3, [r7, #22]
 8001ac4:	2be5      	cmp	r3, #229	; 0xe5
 8001ac6:	d167      	bne.n	8001b98 <SensorInputTask_func+0x174>
 8001ac8:	7d7b      	ldrb	r3, [r7, #21]
 8001aca:	2bd3      	cmp	r3, #211	; 0xd3
 8001acc:	d164      	bne.n	8001b98 <SensorInputTask_func+0x174>
		  {
			  unsigned char ACC_INIT_VAL = 0x8;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	74bb      	strb	r3, [r7, #18]
			  unsigned char ACC_FIFO_INIT_VAL = 0xC0;
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	747b      	strb	r3, [r7, #17]
			  unsigned char GYRO_INIT_VAL[5] = {0x4F, 0x21, 0x0, 0x0, 0x0};
 8001ad6:	4a4e      	ldr	r2, [pc, #312]	; (8001c10 <SensorInputTask_func+0x1ec>)
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	7019      	strb	r1, [r3, #0]
			  unsigned char GYRO_FIFO_INIT_VAL = 0x0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	72fb      	strb	r3, [r7, #11]

			  sensorInitState = 1;
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <SensorInputTask_func+0x1e0>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
			  /*Initialize the sensors*/
			  /*ACC init routine*/
			  retVal = HAL_I2C_Mem_Write(&hi2c1, 0xA6, 0x2D, 1, &ACC_INIT_VAL, 1, 100);
 8001af0:	2364      	movs	r3, #100	; 0x64
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	2301      	movs	r3, #1
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	f107 0312 	add.w	r3, r7, #18
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	222d      	movs	r2, #45	; 0x2d
 8001b02:	21a6      	movs	r1, #166	; 0xa6
 8001b04:	4841      	ldr	r0, [pc, #260]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001b06:	f001 fc07 	bl	8003318 <HAL_I2C_Mem_Write>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	75fb      	strb	r3, [r7, #23]
			  if(retVal == 0)
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10e      	bne.n	8001b32 <SensorInputTask_func+0x10e>
			  {
				  retVal = HAL_I2C_Mem_Write(&hi2c1, 0xA6, 0x38, 1, &ACC_FIFO_INIT_VAL, 1, 100);
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	f107 0311 	add.w	r3, r7, #17
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	2238      	movs	r2, #56	; 0x38
 8001b26:	21a6      	movs	r1, #166	; 0xa6
 8001b28:	4838      	ldr	r0, [pc, #224]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001b2a:	f001 fbf5 	bl	8003318 <HAL_I2C_Mem_Write>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	75fb      	strb	r3, [r7, #23]
			  }
			  /*GYRO init routine*/
			  retValGyro = HAL_I2C_Mem_Write(&hi2c1, 0xD2, 0xA0, 1, &GYRO_INIT_VAL, 5, 100);
 8001b32:	2364      	movs	r3, #100	; 0x64
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	2305      	movs	r3, #5
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2301      	movs	r3, #1
 8001b42:	22a0      	movs	r2, #160	; 0xa0
 8001b44:	21d2      	movs	r1, #210	; 0xd2
 8001b46:	4831      	ldr	r0, [pc, #196]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001b48:	f001 fbe6 	bl	8003318 <HAL_I2C_Mem_Write>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	753b      	strb	r3, [r7, #20]
			  if(retValGyro == 0)
 8001b50:	7d3b      	ldrb	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10e      	bne.n	8001b74 <SensorInputTask_func+0x150>
			  {
				  retValGyro = HAL_I2C_Mem_Write(&hi2c1, 0xD2, 0xAE, 1, &GYRO_FIFO_INIT_VAL, 1, 100);
 8001b56:	2364      	movs	r3, #100	; 0x64
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	f107 030b 	add.w	r3, r7, #11
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	22ae      	movs	r2, #174	; 0xae
 8001b68:	21d2      	movs	r1, #210	; 0xd2
 8001b6a:	4828      	ldr	r0, [pc, #160]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001b6c:	f001 fbd4 	bl	8003318 <HAL_I2C_Mem_Write>
 8001b70:	4603      	mov	r3, r0
 8001b72:	753b      	strb	r3, [r7, #20]
			  }

			  if((retValGyro == 0)&&(retVal == 0))
 8001b74:	7d3b      	ldrb	r3, [r7, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <SensorInputTask_func+0x168>
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <SensorInputTask_func+0x168>
			  {
				  /*Correct sensors found, init complete, program can continue*/
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b86:	4823      	ldr	r0, [pc, #140]	; (8001c14 <SensorInputTask_func+0x1f0>)
 8001b88:	f001 fa68 	bl	800305c <HAL_GPIO_WritePin>
			  }
			  /*Save the timestamp for future task scheduling*/
			  sensorInputTime = xTaskGetTickCount();
 8001b8c:	f005 fea0 	bl	80078d0 <xTaskGetTickCount>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <SensorInputTask_func+0x1f4>)
 8001b94:	6013      	str	r3, [r2, #0]
		  {
 8001b96:	e02f      	b.n	8001bf8 <SensorInputTask_func+0x1d4>
		  }
		  else
		  {
			  /*At least one sensor was not the expected one, so no-go*/
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <SensorInputTask_func+0x1f0>)
 8001ba0:	f001 fa5c 	bl	800305c <HAL_GPIO_WritePin>
 8001ba4:	e028      	b.n	8001bf8 <SensorInputTask_func+0x1d4>
		  }
	  }
	  else
	  {
		  /*Read Raw sensor data*/
		  taskENTER_CRITICAL();
 8001ba6:	f006 fa1d 	bl	8007fe4 <vPortEnterCritical>
		  retVal = HAL_I2C_Mem_Read(&hi2c1, 0xA7, 0x32, 1, (unsigned char *)&ACC_RAW_INPUT_STRUCT, 6, 100);
 8001baa:	2364      	movs	r3, #100	; 0x64
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	2306      	movs	r3, #6
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <SensorInputTask_func+0x1f8>)
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2232      	movs	r2, #50	; 0x32
 8001bba:	21a7      	movs	r1, #167	; 0xa7
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001bbe:	f001 fca5 	bl	800350c <HAL_I2C_Mem_Read>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	75fb      	strb	r3, [r7, #23]
		  retVal = HAL_I2C_Mem_Read(&hi2c1, 0xD3, 0xA6, 1, (unsigned char *)&GYRO_RAW_INPUT_STRUCT, 8, 100);
 8001bc6:	2364      	movs	r3, #100	; 0x64
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	2308      	movs	r3, #8
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <SensorInputTask_func+0x1fc>)
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	22a6      	movs	r2, #166	; 0xa6
 8001bd6:	21d3      	movs	r1, #211	; 0xd3
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <SensorInputTask_func+0x1e8>)
 8001bda:	f001 fc97 	bl	800350c <HAL_I2C_Mem_Read>
 8001bde:	4603      	mov	r3, r0
 8001be0:	75fb      	strb	r3, [r7, #23]
		  taskEXIT_CRITICAL();
 8001be2:	f006 fa2f 	bl	8008044 <vPortExitCritical>
		  gyroCalculateData();
 8001be6:	f000 fb29 	bl	800223c <gyroCalculateData>
		  accCalculateData();
 8001bea:	f000 fbcd 	bl	8002388 <accCalculateData>
		  /*Unblock the Attitude processing task*/
		  //osSignalSet(AttitudeCalcHandle, 1);
		  /*TODO: add SD card memory handling - save data in an array so the telemetry task can write it to SD later*/
		  osThreadResume(AttitudeCalcHandle);
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <SensorInputTask_func+0x200>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 f89c 	bl	8006d30 <osThreadResume>
	  }
	  osDelayUntil(&sensorInputTime, 5);
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <SensorInputTask_func+0x1f4>)
 8001bfc:	f005 f8ba 	bl	8006d74 <osDelayUntil>
	  calcStateMachine();
 8001c00:	e718      	b.n	8001a34 <SensorInputTask_func+0x10>
 8001c02:	bf00      	nop
 8001c04:	200002a1 	.word	0x200002a1
 8001c08:	2000a0a4 	.word	0x2000a0a4
 8001c0c:	20006c34 	.word	0x20006c34
 8001c10:	080087bc 	.word	0x080087bc
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	20006c88 	.word	0x20006c88
 8001c1c:	20009d90 	.word	0x20009d90
 8001c20:	20009d98 	.word	0x20009d98
 8001c24:	20006e24 	.word	0x20006e24

08001c28 <AttitudeCalc_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AttitudeCalc_func */
void AttitudeCalc_func(void const * argument)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
//	  xTaskNotifyWait( 0x00, /* Don't clear any notification bits on entry. */
//			  	  	  ULONG_MAX, /* Reset the notification value to 0 on exit. */
//					  &ulNotifiedValue, /* Notified value pass out in ulNotifiedValue. */
//					  portMAX_DELAY ); /* Block indefinitely. */
	  //callCounter++;
	  calcActualAngle();
 8001c30:	f7ff f946 	bl	8000ec0 <calcActualAngle>
	  //osSignalWait(0,0);
	  //osDelay(1000);
	  /*Unblock the Output task to begin output calculations*/
	  osThreadResume(OutputTaskHandle);
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <AttitudeCalc_func+0x24>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f005 f879 	bl	8006d30 <osThreadResume>
	  osThreadSuspend(AttitudeCalcHandle);
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <AttitudeCalc_func+0x28>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 f867 	bl	8006d16 <osThreadSuspend>
	  calcActualAngle();
 8001c48:	e7f2      	b.n	8001c30 <AttitudeCalc_func+0x8>
 8001c4a:	bf00      	nop
 8001c4c:	20006e28 	.word	0x20006e28
 8001c50:	20006e24 	.word	0x20006e24

08001c54 <telemetryTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_telemetryTask_func */
void telemetryTask_func(void const * argument)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN telemetryTask_func */
  telemetryData.StopBuffer = 0xAA;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <telemetryTask_func+0x94>)
 8001c5e:	22aa      	movs	r2, #170	; 0xaa
 8001c60:	71da      	strb	r2, [r3, #7]
  telemetryData.FrameNumber = 0;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <telemetryTask_func+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	719a      	strb	r2, [r3, #6]
  /* Infinite loop */
  for(;;)
  {
    /*osDelay(1);*/
    telemetryTime = xTaskGetTickCount();
 8001c68:	f005 fe32 	bl	80078d0 <xTaskGetTickCount>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <telemetryTask_func+0x98>)
 8001c70:	6013      	str	r3, [r2, #0]
    /*Arrange serial buffer to be transmitted to ESP32*/
    telemetryData.Data.PitchAngle = (short)(actualPitchAngle*10);
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <telemetryTask_func+0x9c>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <telemetryTask_func+0x94>)
 8001c8c:	801a      	strh	r2, [r3, #0]
    telemetryData.Data.RollAngle = (short)(actualRollAngle*10);
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <telemetryTask_func+0xa0>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <telemetryTask_func+0x94>)
 8001ca8:	805a      	strh	r2, [r3, #2]
    telemetryData.Data.RawYawRate = (short)(actualRawYawRate*10);
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <telemetryTask_func+0xa4>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <telemetryTask_func+0x94>)
 8001cc4:	809a      	strh	r2, [r3, #4]
    telemetryData.FrameNumber++;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <telemetryTask_func+0x94>)
 8001cc8:	799b      	ldrb	r3, [r3, #6]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <telemetryTask_func+0x94>)
 8001cd0:	719a      	strb	r2, [r3, #6]
    /*Start data transmission*/
    HAL_UART_Transmit(&huart4, (uint8_t *)&telemetryData, sizeof(telemetryData), 1);
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4904      	ldr	r1, [pc, #16]	; (8001ce8 <telemetryTask_func+0x94>)
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <telemetryTask_func+0xa8>)
 8001cda:	f003 ff95 	bl	8005c08 <HAL_UART_Transmit>
    /*Re-activate task each 100ms*/
    osDelayUntil(&telemetryTime, 100);
 8001cde:	2164      	movs	r1, #100	; 0x64
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <telemetryTask_func+0x98>)
 8001ce2:	f005 f847 	bl	8006d74 <osDelayUntil>
    telemetryTime = xTaskGetTickCount();
 8001ce6:	e7bf      	b.n	8001c68 <telemetryTask_func+0x14>
 8001ce8:	20006c24 	.word	0x20006c24
 8001cec:	20006c2c 	.word	0x20006c2c
 8001cf0:	20006bbc 	.word	0x20006bbc
 8001cf4:	20006bac 	.word	0x20006bac
 8001cf8:	20006b50 	.word	0x20006b50
 8001cfc:	20009d18 	.word	0x20009d18

08001d00 <OutputTask_Main>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OutputTask_Main */
void OutputTask_Main(void const * argument)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OutputTask_Main */
  /* Infinite loop */
  for(;;)
  {
	PID_Main();
 8001d08:	f000 f8c2 	bl	8001e90 <PID_Main>
	PWM_Main();
 8001d0c:	f000 f88e 	bl	8001e2c <PWM_Main>
	osThreadSuspend(OutputTaskHandle);
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <OutputTask_Main+0x1c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 fffe 	bl	8006d16 <osThreadSuspend>
	PID_Main();
 8001d1a:	e7f5      	b.n	8001d08 <OutputTask_Main+0x8>
 8001d1c:	20006e28 	.word	0x20006e28

08001d20 <rcInputTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rcInputTask_func */
void rcInputTask_func(void const * argument)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rcInputTask_func */
	//rcDataBuffer
	static unsigned char noRcDataCounter;
	noRcDataCounter = 0;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <rcInputTask_func+0x84>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
	syncIsRunning = 1;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <rcInputTask_func+0x88>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
	/*Enable reception interrupt*/
	__HAL_UART_ENABLE_IT(&huart5, UART_IT_RXNE);
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <rcInputTask_func+0x8c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <rcInputTask_func+0x8c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
	  rcInputTime = xTaskGetTickCount();
 8001d44:	f005 fdc4 	bl	80078d0 <xTaskGetTickCount>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <rcInputTask_func+0x90>)
 8001d4c:	6013      	str	r3, [r2, #0]
	  if(syncIsRunning == 1)
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <rcInputTask_func+0x88>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d117      	bne.n	8001d86 <rcInputTask_func+0x66>
	  {
		  if(rcDataReceived == 0)
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <rcInputTask_func+0x94>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d110      	bne.n	8001d80 <rcInputTask_func+0x60>
		  {
			  if(++noRcDataCounter == 3)/*wait 3 ms to be sure no Rx messages are in*/
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <rcInputTask_func+0x84>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <rcInputTask_func+0x84>)
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <rcInputTask_func+0x84>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d109      	bne.n	8001d86 <rcInputTask_func+0x66>
			  {
				  noRcDataCounter = 0;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <rcInputTask_func+0x84>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
				  syncIsRunning = 0;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <rcInputTask_func+0x88>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e002      	b.n	8001d86 <rcInputTask_func+0x66>
			  }
		  }
		  else
		  {
			  rcDataReceived = 0;/*do nothing, just wait for sync to finish*/;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <rcInputTask_func+0x94>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
		  }

	  }
	  if(syncIsRunning == 0)
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <rcInputTask_func+0x88>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d104      	bne.n	8001d98 <rcInputTask_func+0x78>
	  {
		  HAL_UART_Receive_IT(&huart5, rcDataBuffer, 0x20);
 8001d8e:	2220      	movs	r2, #32
 8001d90:	4909      	ldr	r1, [pc, #36]	; (8001db8 <rcInputTask_func+0x98>)
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <rcInputTask_func+0x8c>)
 8001d94:	f003 ffca 	bl	8005d2c <HAL_UART_Receive_IT>
	  }
	  osDelayUntil(&rcInputTime, 1);
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <rcInputTask_func+0x90>)
 8001d9c:	f004 ffea 	bl	8006d74 <osDelayUntil>
	  rcInputTime = xTaskGetTickCount();
 8001da0:	e7d0      	b.n	8001d44 <rcInputTask_func+0x24>
 8001da2:	bf00      	nop
 8001da4:	200002a2 	.word	0x200002a2
 8001da8:	20006cb8 	.word	0x20006cb8
 8001dac:	20006d04 	.word	0x20006d04
 8001db0:	20006e20 	.word	0x20006e20
 8001db4:	20006c30 	.word	0x20006c30
 8001db8:	20006c8c 	.word	0x20006c8c

08001dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dce:	f000 fe15 	bl	80029fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010000 	.word	0x40010000

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <limitCommand>:

double rollPIDResult, pitchPIDResult, yawPIDResult;
unsigned char selectPidCurrentLoop;

unsigned int limitCommand(signed int commDelta)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
	signed int retValue = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
	retValue = commDelta;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
	if(commDelta > 1000)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e04:	dd03      	ble.n	8001e0e <limitCommand+0x20>
	{
		retValue = 999;
 8001e06:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e004      	b.n	8001e18 <limitCommand+0x2a>
	}
	else if (commDelta <1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	dc01      	bgt.n	8001e18 <limitCommand+0x2a>
	{
		retValue = 1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
	}
	return (unsigned int)(4000 - retValue);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <PWM_Main>:

void PWM_Main()
{
 8001e2c:	b598      	push	{r3, r4, r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = limitCommand(commandMot1);
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <PWM_Main+0x50>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <PWM_Main+0x54>)
 8001e36:	6814      	ldr	r4, [r2, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ffd8 	bl	8001dee <limitCommand>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6363      	str	r3, [r4, #52]	; 0x34
	htim3.Instance->CCR2 = limitCommand(commandMot2);
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <PWM_Main+0x58>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <PWM_Main+0x54>)
 8001e48:	6814      	ldr	r4, [r2, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ffcf 	bl	8001dee <limitCommand>
 8001e50:	4603      	mov	r3, r0
 8001e52:	63a3      	str	r3, [r4, #56]	; 0x38
	htim3.Instance->CCR3 = limitCommand(commandMot3);
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <PWM_Main+0x5c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <PWM_Main+0x54>)
 8001e5a:	6814      	ldr	r4, [r2, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ffc6 	bl	8001dee <limitCommand>
 8001e62:	4603      	mov	r3, r0
 8001e64:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = limitCommand(commandMot4);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <PWM_Main+0x60>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <PWM_Main+0x54>)
 8001e6c:	6814      	ldr	r4, [r2, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ffbd 	bl	8001dee <limitCommand>
 8001e74:	4603      	mov	r3, r0
 8001e76:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001e78:	bf00      	nop
 8001e7a:	bd98      	pop	{r3, r4, r7, pc}
 8001e7c:	200002a4 	.word	0x200002a4
 8001e80:	20006cbc 	.word	0x20006cbc
 8001e84:	200002a8 	.word	0x200002a8
 8001e88:	200002ac 	.word	0x200002ac
 8001e8c:	200002b0 	.word	0x200002b0

08001e90 <PID_Main>:


void PID_Main(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	ed2d 8b02 	vpush	{d8}
 8001e96:	af00      	add	r7, sp, #0
    if(Init_PID == 1)
 8001e98:	4b97      	ldr	r3, [pc, #604]	; (80020f8 <PID_Main+0x268>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10e      	bne.n	8001ebe <PID_Main+0x2e>
    {
        commandMot1 = 0;
 8001ea0:	4b96      	ldr	r3, [pc, #600]	; (80020fc <PID_Main+0x26c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
        commandMot2 = 0;
 8001ea6:	4b96      	ldr	r3, [pc, #600]	; (8002100 <PID_Main+0x270>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
        commandMot3 = 0;
 8001eac:	4b95      	ldr	r3, [pc, #596]	; (8002104 <PID_Main+0x274>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
        commandMot4 = 0;
 8001eb2:	4b95      	ldr	r3, [pc, #596]	; (8002108 <PID_Main+0x278>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
        Init_PID = 0;
 8001eb8:	4b8f      	ldr	r3, [pc, #572]	; (80020f8 <PID_Main+0x268>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
    }
   
    if((1/*STATUS_ARMED*/)&&(1/*INPUT_COMM.THROTTLE_STICK >= 100*/))
    {
			rollPIDResult = UpdatePID(&rollAxis, rollAngleError, actualRollAngle);
 8001ebe:	4b93      	ldr	r3, [pc, #588]	; (800210c <PID_Main+0x27c>)
 8001ec0:	ed93 8b00 	vldr	d8, [r3]
 8001ec4:	4b92      	ldr	r3, [pc, #584]	; (8002110 <PID_Main+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fae5 	bl	8000498 <__aeabi_f2d>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	ec43 2b11 	vmov	d1, r2, r3
 8001ed6:	eeb0 0a48 	vmov.f32	s0, s16
 8001eda:	eef0 0a68 	vmov.f32	s1, s17
 8001ede:	488d      	ldr	r0, [pc, #564]	; (8002114 <PID_Main+0x284>)
 8001ee0:	f000 f92c 	bl	800213c <UpdatePID>
 8001ee4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ee8:	eef0 7a60 	vmov.f32	s15, s1
 8001eec:	4b8a      	ldr	r3, [pc, #552]	; (8002118 <PID_Main+0x288>)
 8001eee:	ed83 7b00 	vstr	d7, [r3]
			if(rollPIDResult < 0) rollPIDResult = 0;
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <PID_Main+0x288>)
 8001ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	f7fe fd94 	bl	8000a2c <__aeabi_dcmplt>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <PID_Main+0x88>
 8001f0a:	4983      	ldr	r1, [pc, #524]	; (8002118 <PID_Main+0x288>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
			pitchPIDResult = UpdatePID(&pitchAxis, pitchAngleError, actualPitchAngle);
 8001f18:	4b80      	ldr	r3, [pc, #512]	; (800211c <PID_Main+0x28c>)
 8001f1a:	ed93 8b00 	vldr	d8, [r3]
 8001f1e:	4b80      	ldr	r3, [pc, #512]	; (8002120 <PID_Main+0x290>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fab8 	bl	8000498 <__aeabi_f2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	ec43 2b11 	vmov	d1, r2, r3
 8001f30:	eeb0 0a48 	vmov.f32	s0, s16
 8001f34:	eef0 0a68 	vmov.f32	s1, s17
 8001f38:	487a      	ldr	r0, [pc, #488]	; (8002124 <PID_Main+0x294>)
 8001f3a:	f000 f8ff 	bl	800213c <UpdatePID>
 8001f3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001f42:	eef0 7a60 	vmov.f32	s15, s1
 8001f46:	4b78      	ldr	r3, [pc, #480]	; (8002128 <PID_Main+0x298>)
 8001f48:	ed83 7b00 	vstr	d7, [r3]
			if(pitchPIDResult < 0) pitchPIDResult = 0;
 8001f4c:	4b76      	ldr	r3, [pc, #472]	; (8002128 <PID_Main+0x298>)
 8001f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f7fe fd67 	bl	8000a2c <__aeabi_dcmplt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <PID_Main+0xe2>
 8001f64:	4970      	ldr	r1, [pc, #448]	; (8002128 <PID_Main+0x298>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9c1 2300 	strd	r2, r3, [r1]
			yawPIDResult = UpdatePID(&yawAxis, yawRateError, actualRawYawRate);
 8001f72:	4b6e      	ldr	r3, [pc, #440]	; (800212c <PID_Main+0x29c>)
 8001f74:	ed93 8b00 	vldr	d8, [r3]
 8001f78:	4b6d      	ldr	r3, [pc, #436]	; (8002130 <PID_Main+0x2a0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa8b 	bl	8000498 <__aeabi_f2d>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	ec43 2b11 	vmov	d1, r2, r3
 8001f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8001f8e:	eef0 0a68 	vmov.f32	s1, s17
 8001f92:	4868      	ldr	r0, [pc, #416]	; (8002134 <PID_Main+0x2a4>)
 8001f94:	f000 f8d2 	bl	800213c <UpdatePID>
 8001f98:	eeb0 7a40 	vmov.f32	s14, s0
 8001f9c:	eef0 7a60 	vmov.f32	s15, s1
 8001fa0:	4b65      	ldr	r3, [pc, #404]	; (8002138 <PID_Main+0x2a8>)
 8001fa2:	ed83 7b00 	vstr	d7, [r3]
			if(yawPIDResult < 0) yawPIDResult = 0;
 8001fa6:	4b64      	ldr	r3, [pc, #400]	; (8002138 <PID_Main+0x2a8>)
 8001fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f7fe fd3a 	bl	8000a2c <__aeabi_dcmplt>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <PID_Main+0x13c>
 8001fbe:	495e      	ldr	r1, [pc, #376]	; (8002138 <PID_Main+0x2a8>)
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9c1 2300 	strd	r2, r3, [r1]
			commandMot1 = PIDMIX(+1,+1, +1);
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <PID_Main+0x288>)
 8001fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd2:	a347      	add	r3, pc, #284	; (adr r3, 80020f0 <PID_Main+0x260>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe f900 	bl	80001dc <__adddf3>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <PID_Main+0x298>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe f8f7 	bl	80001dc <__adddf3>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4b50      	ldr	r3, [pc, #320]	; (8002138 <PID_Main+0x2a8>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe f8ee 	bl	80001dc <__adddf3>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fd38 	bl	8000a7c <__aeabi_d2iz>
 800200c:	4603      	mov	r3, r0
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <PID_Main+0x26c>)
 8002010:	6013      	str	r3, [r2, #0]
			commandMot2 = PIDMIX(-1,+1, -1);
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <PID_Main+0x288>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	a135      	add	r1, pc, #212	; (adr r1, 80020f0 <PID_Main+0x260>)
 800201a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800201e:	f7fe f8db 	bl	80001d8 <__aeabi_dsub>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <PID_Main+0x298>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe f8d4 	bl	80001dc <__adddf3>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <PID_Main+0x2a8>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe f8c9 	bl	80001d8 <__aeabi_dsub>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd15 	bl	8000a7c <__aeabi_d2iz>
 8002052:	4603      	mov	r3, r0
 8002054:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <PID_Main+0x270>)
 8002056:	6013      	str	r3, [r2, #0]
			commandMot3 = PIDMIX(-1,-1, +1);
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <PID_Main+0x288>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	a124      	add	r1, pc, #144	; (adr r1, 80020f0 <PID_Main+0x260>)
 8002060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002064:	f7fe f8b8 	bl	80001d8 <__aeabi_dsub>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <PID_Main+0x298>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe f8af 	bl	80001d8 <__aeabi_dsub>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <PID_Main+0x2a8>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe f8a8 	bl	80001dc <__adddf3>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fcf2 	bl	8000a7c <__aeabi_d2iz>
 8002098:	4603      	mov	r3, r0
 800209a:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <PID_Main+0x274>)
 800209c:	6013      	str	r3, [r2, #0]
			commandMot4 = PIDMIX(+1,-1, -1);
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <PID_Main+0x288>)
 80020a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a4:	a312      	add	r3, pc, #72	; (adr r3, 80020f0 <PID_Main+0x260>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe f897 	bl	80001dc <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <PID_Main+0x298>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe f88c 	bl	80001d8 <__aeabi_dsub>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <PID_Main+0x2a8>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe f883 	bl	80001d8 <__aeabi_dsub>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fccf 	bl	8000a7c <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <PID_Main+0x278>)
 80020e2:	6013      	str	r3, [r2, #0]
				{
					/*No data output was sent because runtime is too high; in this case, send some predefined character*/
				}
    }
#endif
} 
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	ecbd 8b02 	vpop	{d8}
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	00000000 	.word	0x00000000
 80020f4:	40913000 	.word	0x40913000
 80020f8:	2000a048 	.word	0x2000a048
 80020fc:	200002a4 	.word	0x200002a4
 8002100:	200002a8 	.word	0x200002a8
 8002104:	200002ac 	.word	0x200002ac
 8002108:	200002b0 	.word	0x200002b0
 800210c:	20006b60 	.word	0x20006b60
 8002110:	20006bac 	.word	0x20006bac
 8002114:	20009fb8 	.word	0x20009fb8
 8002118:	2000a000 	.word	0x2000a000
 800211c:	20006bb0 	.word	0x20006bb0
 8002120:	20006bbc 	.word	0x20006bbc
 8002124:	2000a008 	.word	0x2000a008
 8002128:	20009ff8 	.word	0x20009ff8
 800212c:	20006c18 	.word	0x20006c18
 8002130:	20006b50 	.word	0x20006b50
 8002134:	2000a050 	.word	0x2000a050
 8002138:	2000a040 	.word	0x2000a040

0800213c <UpdatePID>:

/*============================================*/
/*PID code that should be called for each axis*/
/*============================================*/
double UpdatePID(SPid * pid, double error, double position)
{
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0
 8002142:	6178      	str	r0, [r7, #20]
 8002144:	ed87 0b02 	vstr	d0, [r7, #8]
 8002148:	ed87 1b00 	vstr	d1, [r7]
	double pTerm, dTerm, iTerm;
	pTerm = pid->pGain * error;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	// calculate the proportional term
	// calculate the integral state with appropriate limiting
	pid->iState += error;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800216c:	f7fe f836 	bl	80001dc <__adddf3>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	6979      	ldr	r1, [r7, #20]
 8002176:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (pid->iState > pid->iMax) 
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002186:	f7fe fc6f 	bl	8000a68 <__aeabi_dcmpgt>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <UpdatePID+0x62>
	{
		pid->iState = pid->iMax;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800219c:	e010      	b.n	80021c0 <UpdatePID+0x84>
	}
	else if (pid->iState < pid->iMin)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021aa:	f7fe fc3f 	bl	8000a2c <__aeabi_dcmplt>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <UpdatePID+0x84>
	{
		pid->iState = pid->iMin;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	iTerm = pid->iGain * pid->iState; // calculate the integral term
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021cc:	f7fe f9bc 	bl	8000548 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	dTerm = pid->dGain * (position - pid->dState);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021e8:	f7fd fff6 	bl	80001d8 <__aeabi_dsub>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe f9a8 	bl	8000548 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->dState = position;
 8002200:	6979      	ldr	r1, [r7, #20]
 8002202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002206:	e9c1 2300 	strd	r2, r3, [r1]
	return pTerm + iTerm - dTerm;
 800220a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002212:	f7fd ffe3 	bl	80001dc <__adddf3>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002222:	f7fd ffd9 	bl	80001d8 <__aeabi_dsub>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	ec43 2b17 	vmov	d7, r2, r3
}
 800222e:	eeb0 0a47 	vmov.f32	s0, s14
 8002232:	eef0 0a67 	vmov.f32	s1, s15
 8002236:	3730      	adds	r7, #48	; 0x30
 8002238:	46bd      	mov	sp, r7
 800223a:	bdb0      	pop	{r4, r5, r7, pc}

0800223c <gyroCalculateData>:

unsigned int missX=0, missY=0, missZ=0;

/*=== Function to calculate the angular velocity and the angle of deviation from gyro raw data ===*/
void gyroCalculateData()
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
	signed short tempVar;

	/*=== If new X axis data is available, calculate the raw angular velocity ===*/
	if(GYRO_RAW_INPUT_STRUCT.STATUS_REG & GyroMaskXdataAvail)
 8002242:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <gyroCalculateData+0x134>)
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d024      	beq.n	8002298 <gyroCalculateData+0x5c>
	{
		tempVar = (signed short)((GYRO_RAW_INPUT_STRUCT.OUT_X_H<<8) | (GYRO_RAW_INPUT_STRUCT.OUT_X_L));
 800224e:	4b48      	ldr	r3, [pc, #288]	; (8002370 <gyroCalculateData+0x134>)
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	b21a      	sxth	r2, r3
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <gyroCalculateData+0x134>)
 8002258:	789b      	ldrb	r3, [r3, #2]
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	80fb      	strh	r3, [r7, #6]
		GYRO_DATA_STRUCT.GYRO_RAW_X_ANGLE_VEL = (float)(((tempVar)*9)); //mili degrees per second
 8002260:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002272:	4b40      	ldr	r3, [pc, #256]	; (8002374 <gyroCalculateData+0x138>)
 8002274:	edc3 7a00 	vstr	s15, [r3]
		GYRO_DATA_STRUCT.GYRO_X_ANGLE_TO_EARTH += (GYRO_DATA_STRUCT.GYRO_RAW_X_ANGLE_VEL/200000);
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <gyroCalculateData+0x138>)
 800227a:	ed93 7a03 	vldr	s14, [r3, #12]
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <gyroCalculateData+0x138>)
 8002280:	edd3 6a00 	vldr	s13, [r3]
 8002284:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8002378 <gyroCalculateData+0x13c>
 8002288:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	4b38      	ldr	r3, [pc, #224]	; (8002374 <gyroCalculateData+0x138>)
 8002292:	edc3 7a03 	vstr	s15, [r3, #12]
 8002296:	e004      	b.n	80022a2 <gyroCalculateData+0x66>
	}
	else
	{
		missX++;
 8002298:	4b38      	ldr	r3, [pc, #224]	; (800237c <gyroCalculateData+0x140>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a37      	ldr	r2, [pc, #220]	; (800237c <gyroCalculateData+0x140>)
 80022a0:	6013      	str	r3, [r2, #0]
	}
	if(GYRO_RAW_INPUT_STRUCT.STATUS_REG & GyroMaskYdataAvail)
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <gyroCalculateData+0x134>)
 80022a4:	785b      	ldrb	r3, [r3, #1]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d024      	beq.n	80022f8 <gyroCalculateData+0xbc>
	{
		tempVar = (signed short)((GYRO_RAW_INPUT_STRUCT.OUT_Y_H<<8) | (GYRO_RAW_INPUT_STRUCT.OUT_Y_L));
 80022ae:	4b30      	ldr	r3, [pc, #192]	; (8002370 <gyroCalculateData+0x134>)
 80022b0:	795b      	ldrb	r3, [r3, #5]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <gyroCalculateData+0x134>)
 80022b8:	791b      	ldrb	r3, [r3, #4]
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
		GYRO_DATA_STRUCT.GYRO_RAW_Y_ANGLE_VEL = (float)(((tempVar)*9));
 80022c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <gyroCalculateData+0x138>)
 80022d4:	edc3 7a01 	vstr	s15, [r3, #4]
		GYRO_DATA_STRUCT.GYRO_Y_ANGLE_TO_EARTH += GYRO_DATA_STRUCT.GYRO_RAW_Y_ANGLE_VEL/200000;
 80022d8:	4b26      	ldr	r3, [pc, #152]	; (8002374 <gyroCalculateData+0x138>)
 80022da:	ed93 7a04 	vldr	s14, [r3, #16]
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <gyroCalculateData+0x138>)
 80022e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80022e4:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8002378 <gyroCalculateData+0x13c>
 80022e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <gyroCalculateData+0x138>)
 80022f2:	edc3 7a04 	vstr	s15, [r3, #16]
 80022f6:	e004      	b.n	8002302 <gyroCalculateData+0xc6>
	}
	else
	{
		missY++;
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <gyroCalculateData+0x144>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a20      	ldr	r2, [pc, #128]	; (8002380 <gyroCalculateData+0x144>)
 8002300:	6013      	str	r3, [r2, #0]
	}
	if(GYRO_RAW_INPUT_STRUCT.STATUS_REG & GyroMaskZdataAvail)
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <gyroCalculateData+0x134>)
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d024      	beq.n	8002358 <gyroCalculateData+0x11c>
	{
		tempVar = (signed short)((GYRO_RAW_INPUT_STRUCT.OUT_Z_H<<8) | (GYRO_RAW_INPUT_STRUCT.OUT_Z_L));
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <gyroCalculateData+0x134>)
 8002310:	79db      	ldrb	r3, [r3, #7]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b21a      	sxth	r2, r3
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <gyroCalculateData+0x134>)
 8002318:	799b      	ldrb	r3, [r3, #6]
 800231a:	b21b      	sxth	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	80fb      	strh	r3, [r7, #6]
		GYRO_DATA_STRUCT.GYRO_RAW_Z_ANGLE_VEL = (float)(((tempVar)*9));
 8002320:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <gyroCalculateData+0x138>)
 8002334:	edc3 7a02 	vstr	s15, [r3, #8]
		GYRO_DATA_STRUCT.GYRO_Z_ANGLE_TO_EARTH += GYRO_DATA_STRUCT.GYRO_RAW_Z_ANGLE_VEL/200000;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <gyroCalculateData+0x138>)
 800233a:	ed93 7a05 	vldr	s14, [r3, #20]
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <gyroCalculateData+0x138>)
 8002340:	edd3 6a02 	vldr	s13, [r3, #8]
 8002344:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8002378 <gyroCalculateData+0x13c>
 8002348:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <gyroCalculateData+0x138>)
 8002352:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	else
	{
		missZ++;
	}
}
 8002356:	e004      	b.n	8002362 <gyroCalculateData+0x126>
		missZ++;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <gyroCalculateData+0x148>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <gyroCalculateData+0x148>)
 8002360:	6013      	str	r3, [r2, #0]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20009d98 	.word	0x20009d98
 8002374:	2000a0a4 	.word	0x2000a0a4
 8002378:	48435000 	.word	0x48435000
 800237c:	200002b4 	.word	0x200002b4
 8002380:	200002b8 	.word	0x200002b8
 8002384:	200002bc 	.word	0x200002bc

08002388 <accCalculateData>:

void accCalculateData()
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	signed short tempVar;

	tempVar = (signed short)((ACC_RAW_INPUT_STRUCT.OUT_X_H<<8) | (ACC_RAW_INPUT_STRUCT.OUT_X_L));
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <accCalculateData+0xa0>)
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	b21a      	sxth	r2, r3
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <accCalculateData+0xa0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b21b      	sxth	r3, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
	ACC_DATA_STRUCT.ACC_RAW_X_ANGLE_VEL = (double)((((double)tempVar)/256)); /*g*/
 80023a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f865 	bl	8000474 <__aeabi_i2d>
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <accCalculateData+0xa4>)
 80023b0:	f7fe f9f4 	bl	800079c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fb86 	bl	8000acc <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <accCalculateData+0xa8>)
 80023c4:	6013      	str	r3, [r2, #0]

	tempVar = (signed short)((ACC_RAW_INPUT_STRUCT.OUT_Y_H<<8) | (ACC_RAW_INPUT_STRUCT.OUT_Y_L));
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <accCalculateData+0xa0>)
 80023c8:	78db      	ldrb	r3, [r3, #3]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <accCalculateData+0xa0>)
 80023d0:	789b      	ldrb	r3, [r3, #2]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	80fb      	strh	r3, [r7, #6]
	ACC_DATA_STRUCT.ACC_RAW_Y_ANGLE_VEL = (float)((((float)tempVar)/256)); /*g*/
 80023d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002434 <accCalculateData+0xac>
 80023e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <accCalculateData+0xa8>)
 80023ee:	edc3 7a01 	vstr	s15, [r3, #4]

	tempVar = (signed short)((ACC_RAW_INPUT_STRUCT.OUT_Z_H<<8) | (ACC_RAW_INPUT_STRUCT.OUT_Z_L));
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <accCalculateData+0xa0>)
 80023f4:	795b      	ldrb	r3, [r3, #5]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	b21a      	sxth	r2, r3
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <accCalculateData+0xa0>)
 80023fc:	791b      	ldrb	r3, [r3, #4]
 80023fe:	b21b      	sxth	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	80fb      	strh	r3, [r7, #6]
	ACC_DATA_STRUCT.ACC_RAW_Z_ANGLE_VEL = (float)((((float)tempVar)/256)); /*g*/
 8002404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002410:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002434 <accCalculateData+0xac>
 8002414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <accCalculateData+0xa8>)
 800241a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20009d90 	.word	0x20009d90
 800242c:	40700000 	.word	0x40700000
 8002430:	2000a088 	.word	0x2000a088
 8002434:	43800000 	.word	0x43800000

08002438 <HAL_GET_GYRO_RAW_DATA_IF>:

unsigned char HAL_GET_GYRO_RAW_DATA_IF(gyro_raw_data_t* Buffer)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
		Buffer->GET_GYRO_RAW_Y_ANGLE_VEL[GyroRawQueueIndex] = GYRO_DATA_STRUCT.GYRO_RAW_Y_ANGLE_VEL;
		Buffer->GET_GYRO_RAW_Z_ANGLE_VEL[GyroRawQueueIndex] = GYRO_DATA_STRUCT.GYRO_RAW_Z_ANGLE_VEL;
		GyroRawQueueIndex++;
	}
#else
	Buffer->GET_GYRO_RAW_X_ANGLE_VEL[0] = GYRO_DATA_STRUCT.GYRO_RAW_X_ANGLE_VEL;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_GET_GYRO_RAW_DATA_IF+0x34>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	601a      	str	r2, [r3, #0]
	Buffer->GET_GYRO_RAW_Y_ANGLE_VEL[0] = GYRO_DATA_STRUCT.GYRO_RAW_Y_ANGLE_VEL;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_GET_GYRO_RAW_DATA_IF+0x34>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	615a      	str	r2, [r3, #20]
	Buffer->GET_GYRO_RAW_Z_ANGLE_VEL[0] = GYRO_DATA_STRUCT.GYRO_RAW_Z_ANGLE_VEL;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_GET_GYRO_RAW_DATA_IF+0x34>)
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
#endif
	retValue = E_OK;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
	return retValue;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000a0a4 	.word	0x2000a0a4

08002470 <HAL_GET_ACC_DATA_IF>:
	else retValue = E_NOK;
	return retValue;
}

unsigned char HAL_GET_ACC_DATA_IF(acc_data_t* Buffer)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
			Buffer->ACCELERATIO_AXIS_Y[AccQueueIndex] = ACC_DATA_STRUCT.ACC_RAW_Y_ANGLE_VEL;
			Buffer->ACCELERATIO_AXIS_Z[AccQueueIndex] = ACC_DATA_STRUCT.ACC_RAW_Z_ANGLE_VEL;
			AccQueueIndex++;
		}
#else
		Buffer->ACCELERATIO_AXIS_X[0] = ACC_DATA_STRUCT.ACC_RAW_X_ANGLE_VEL;
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_GET_ACC_DATA_IF+0x30>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]
		Buffer->ACCELERATIO_AXIS_Y[0] = ACC_DATA_STRUCT.ACC_RAW_Y_ANGLE_VEL;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_GET_ACC_DATA_IF+0x30>)
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	615a      	str	r2, [r3, #20]
		Buffer->ACCELERATIO_AXIS_Z[0] = ACC_DATA_STRUCT.ACC_RAW_Z_ANGLE_VEL;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_GET_ACC_DATA_IF+0x30>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
	return E_OK;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	2000a088 	.word	0x2000a088

080024a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_MspInit+0x54>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a11      	ldr	r2, [pc, #68]	; (80024f8 <HAL_MspInit+0x54>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_MspInit+0x54>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_MspInit+0x54>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_MspInit+0x54>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_MspInit+0x54>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	210f      	movs	r1, #15
 80024e6:	f06f 0001 	mvn.w	r0, #1
 80024ea:	f000 fb5f 	bl	8002bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_I2C_MspInit+0x84>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12c      	bne.n	8002578 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800253a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800253e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002540:	2312      	movs	r3, #18
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002544:	2301      	movs	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254c:	2304      	movs	r3, #4
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	480c      	ldr	r0, [pc, #48]	; (8002588 <HAL_I2C_MspInit+0x8c>)
 8002558:	f000 fbe4 	bl	8002d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256a:	6413      	str	r3, [r2, #64]	; 0x40
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_I2C_MspInit+0x88>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40005400 	.word	0x40005400
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_TIM_Base_MspInit+0x3c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_TIM_Base_MspInit+0x40>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_TIM_Base_MspInit+0x40>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_TIM_Base_MspInit+0x40>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a21      	ldr	r2, [pc, #132]	; (8002674 <HAL_TIM_MspPostInit+0xa4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d13b      	bne.n	800266a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_TIM_MspPostInit+0xa8>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <HAL_TIM_MspPostInit+0xa8>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_TIM_MspPostInit+0xa8>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_TIM_MspPostInit+0xa8>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a18      	ldr	r2, [pc, #96]	; (8002678 <HAL_TIM_MspPostInit+0xa8>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_TIM_MspPostInit+0xa8>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800262a:	23c0      	movs	r3, #192	; 0xc0
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002632:	2302      	movs	r3, #2
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002636:	2301      	movs	r3, #1
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800263a:	2302      	movs	r3, #2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	480d      	ldr	r0, [pc, #52]	; (800267c <HAL_TIM_MspPostInit+0xac>)
 8002646:	f000 fb6d 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800264a:	2303      	movs	r3, #3
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002652:	2302      	movs	r3, #2
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002656:	2301      	movs	r3, #1
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800265a:	2302      	movs	r3, #2
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4806      	ldr	r0, [pc, #24]	; (8002680 <HAL_TIM_MspPostInit+0xb0>)
 8002666:	f000 fb5d 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40000400 	.word	0x40000400
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a45      	ldr	r2, [pc, #276]	; (80027b8 <HAL_UART_MspInit+0x134>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d12c      	bne.n	8002700 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	4b44      	ldr	r3, [pc, #272]	; (80027bc <HAL_UART_MspInit+0x138>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a43      	ldr	r2, [pc, #268]	; (80027bc <HAL_UART_MspInit+0x138>)
 80026b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_UART_MspInit+0x138>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_UART_MspInit+0x138>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <HAL_UART_MspInit+0x138>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_UART_MspInit+0x138>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026de:	2303      	movs	r3, #3
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ea:	2303      	movs	r3, #3
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026ee:	2308      	movs	r3, #8
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4619      	mov	r1, r3
 80026f8:	4831      	ldr	r0, [pc, #196]	; (80027c0 <HAL_UART_MspInit+0x13c>)
 80026fa:	f000 fb13 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80026fe:	e057      	b.n	80027b0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==UART5)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <HAL_UART_MspInit+0x140>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d152      	bne.n	80027b0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_UART_MspInit+0x138>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <HAL_UART_MspInit+0x138>)
 8002714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <HAL_UART_MspInit+0x138>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_UART_MspInit+0x138>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_UART_MspInit+0x138>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_UART_MspInit+0x138>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_UART_MspInit+0x138>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <HAL_UART_MspInit+0x138>)
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_UART_MspInit+0x138>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800275e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002770:	2308      	movs	r3, #8
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4813      	ldr	r0, [pc, #76]	; (80027c8 <HAL_UART_MspInit+0x144>)
 800277c:	f000 fad2 	bl	8002d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002780:	2304      	movs	r3, #4
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002790:	2308      	movs	r3, #8
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	480c      	ldr	r0, [pc, #48]	; (80027cc <HAL_UART_MspInit+0x148>)
 800279c:	f000 fac2 	bl	8002d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2105      	movs	r1, #5
 80027a4:	2035      	movs	r0, #53	; 0x35
 80027a6:	f000 fa01 	bl	8002bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80027aa:	2035      	movs	r0, #53	; 0x35
 80027ac:	f000 fa1a 	bl	8002be4 <HAL_NVIC_EnableIRQ>
}
 80027b0:	bf00      	nop
 80027b2:	3730      	adds	r7, #48	; 0x30
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40004c00 	.word	0x40004c00
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40005000 	.word	0x40005000
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020c00 	.word	0x40020c00

080027d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	2019      	movs	r0, #25
 80027e6:	f000 f9e1 	bl	8002bac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027ea:	2019      	movs	r0, #25
 80027ec:	f000 f9fa 	bl	8002be4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_InitTick+0xa0>)
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_InitTick+0xa0>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_InitTick+0xa0>)
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800280c:	f107 0210 	add.w	r2, r7, #16
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f002 f86e 	bl	80048f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800281c:	f002 f858 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 8002820:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <HAL_InitTick+0xa4>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	3b01      	subs	r3, #1
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_InitTick+0xa8>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_InitTick+0xac>)
 8002834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_InitTick+0xa8>)
 8002838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800283c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_InitTick+0xa8>)
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_InitTick+0xa8>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_InitTick+0xa8>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <HAL_InitTick+0xa8>)
 8002852:	f002 f883 	bl	800495c <HAL_TIM_Base_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800285c:	4806      	ldr	r0, [pc, #24]	; (8002878 <HAL_InitTick+0xa8>)
 800285e:	f002 f8cd 	bl	80049fc <HAL_TIM_Base_Start_IT>
 8002862:	4603      	mov	r3, r0
 8002864:	e000      	b.n	8002868 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	431bde83 	.word	0x431bde83
 8002878:	2000a0c0 	.word	0x2000a0c0
 800287c:	40010000 	.word	0x40010000

08002880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <HardFault_Handler+0x4>

08002894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <MemManage_Handler+0x4>

0800289a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <BusFault_Handler+0x4>

080028a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <UsageFault_Handler+0x4>

080028a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028ba:	f002 fa31 	bl	8004d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000a0c0 	.word	0x2000a0c0

080028c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  rcDataReceived++;
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <UART5_IRQHandler+0x24>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <UART5_IRQHandler+0x24>)
 80028d6:	701a      	strb	r2, [r3, #0]
  if(syncIsRunning == 0)
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <UART5_IRQHandler+0x28>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <UART5_IRQHandler+0x1e>
  {
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80028e0:	4804      	ldr	r0, [pc, #16]	; (80028f4 <UART5_IRQHandler+0x2c>)
 80028e2:	f003 fa53 	bl	8005d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  }
  /* USER CODE END UART5_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20006c30 	.word	0x20006c30
 80028f0:	20006cb8 	.word	0x20006cb8
 80028f4:	20006d04 	.word	0x20006d04

080028f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <SystemInit+0x60>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <SystemInit+0x60>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <SystemInit+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <SystemInit+0x64>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <SystemInit+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <SystemInit+0x64>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0e      	ldr	r2, [pc, #56]	; (800295c <SystemInit+0x64>)
 8002924:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <SystemInit+0x64>)
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <SystemInit+0x68>)
 8002932:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <SystemInit+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a08      	ldr	r2, [pc, #32]	; (800295c <SystemInit+0x64>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <SystemInit+0x64>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <SystemInit+0x60>)
 8002948:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800294c:	609a      	str	r2, [r3, #8]
#endif
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00
 800295c:	40023800 	.word	0x40023800
 8002960:	24003010 	.word	0x24003010

08002964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800299c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800296a:	e003      	b.n	8002974 <LoopCopyDataInit>

0800296c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800296e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002972:	3104      	adds	r1, #4

08002974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800297a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800297c:	d3f6      	bcc.n	800296c <CopyDataInit>
  ldr  r2, =_sbss
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002980:	e002      	b.n	8002988 <LoopFillZerobss>

08002982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002984:	f842 3b04 	str.w	r3, [r2], #4

08002988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800298a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800298c:	d3f9      	bcc.n	8002982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800298e:	f7ff ffb3 	bl	80028f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002992:	f005 fe33 	bl	80085fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002996:	f7fe fc8f 	bl	80012b8 <main>
  bx  lr    
 800299a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800299c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029a0:	080087f4 	.word	0x080087f4
  ldr  r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029a8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80029ac:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80029b0:	2000a10c 	.word	0x2000a10c

080029b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_Init+0x40>)
 80029c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_Init+0x40>)
 80029ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_Init+0x40>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e0:	2003      	movs	r0, #3
 80029e2:	f000 f8d8 	bl	8002b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff fef2 	bl	80027d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ec:	f7ff fd5a 	bl	80024a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00

080029fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x20>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_IncTick+0x24>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_IncTick+0x24>)
 8002a0e:	6013      	str	r3, [r2, #0]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000008 	.word	0x20000008
 8002a20:	2000a108 	.word	0x2000a108

08002a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_GetTick+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	2000a108 	.word	0x2000a108

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff4c 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbe:	f7ff ff61 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f7ff ffb1 	bl	8002b30 <NVIC_EncodePriority>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff80 	bl	8002adc <__NVIC_SetPriority>
}
 8002bdc:	bf00      	nop
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff54 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c0e:	f7ff ff09 	bl	8002a24 <HAL_GetTick>
 8002c12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e052      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0216 	bic.w	r2, r2, #22
 8002c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_DMA_Abort+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0208 	bic.w	r2, r2, #8
 8002c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c82:	e013      	b.n	8002cac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c84:	f7ff fece 	bl	8002a24 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d90c      	bls.n	8002cac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e015      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e4      	bne.n	8002c84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	223f      	movs	r2, #63	; 0x3f
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d004      	beq.n	8002cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00c      	b.n	8002d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2205      	movs	r2, #5
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e16b      	b.n	8003018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 815a 	bne.w	8003012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d017      	beq.n	8002e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80b4 	beq.w	8003012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b60      	ldr	r3, [pc, #384]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a5f      	ldr	r2, [pc, #380]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	; (8003034 <HAL_GPIO_Init+0x310>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_GPIO_Init+0x314>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <HAL_GPIO_Init+0x318>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d025      	beq.n	8002f46 <HAL_GPIO_Init+0x222>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_GPIO_Init+0x31c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <HAL_GPIO_Init+0x21e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4f      	ldr	r2, [pc, #316]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4e      	ldr	r2, [pc, #312]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x216>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4d      	ldr	r2, [pc, #308]	; (800304c <HAL_GPIO_Init+0x328>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <HAL_GPIO_Init+0x32c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x20a>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00e      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f32:	2306      	movs	r3, #6
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4935      	ldr	r1, [pc, #212]	; (8003034 <HAL_GPIO_Init+0x310>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8e:	4a32      	ldr	r2, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_GPIO_Init+0x334>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f ae90 	bls.w	8002d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40021400 	.word	0x40021400
 8003050:	40021800 	.word	0x40021800
 8003054:	40021c00 	.word	0x40021c00
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e12b      	b.n	80032fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fa20 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2224      	movs	r2, #36	; 0x24
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f4:	f001 fbd8 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a81      	ldr	r2, [pc, #516]	; (8003304 <HAL_I2C_Init+0x274>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d807      	bhi.n	8003114 <HAL_I2C_Init+0x84>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a80      	ldr	r2, [pc, #512]	; (8003308 <HAL_I2C_Init+0x278>)
 8003108:	4293      	cmp	r3, r2
 800310a:	bf94      	ite	ls
 800310c:	2301      	movls	r3, #1
 800310e:	2300      	movhi	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e006      	b.n	8003122 <HAL_I2C_Init+0x92>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4a7d      	ldr	r2, [pc, #500]	; (800330c <HAL_I2C_Init+0x27c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	bf94      	ite	ls
 800311c:	2301      	movls	r3, #1
 800311e:	2300      	movhi	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0e7      	b.n	80032fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a78      	ldr	r2, [pc, #480]	; (8003310 <HAL_I2C_Init+0x280>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0c9b      	lsrs	r3, r3, #18
 8003134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a6a      	ldr	r2, [pc, #424]	; (8003304 <HAL_I2C_Init+0x274>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d802      	bhi.n	8003164 <HAL_I2C_Init+0xd4>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3301      	adds	r3, #1
 8003162:	e009      	b.n	8003178 <HAL_I2C_Init+0xe8>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a69      	ldr	r2, [pc, #420]	; (8003314 <HAL_I2C_Init+0x284>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	3301      	adds	r3, #1
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800318a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	495c      	ldr	r1, [pc, #368]	; (8003304 <HAL_I2C_Init+0x274>)
 8003194:	428b      	cmp	r3, r1
 8003196:	d819      	bhi.n	80031cc <HAL_I2C_Init+0x13c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e59      	subs	r1, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ac:	400b      	ands	r3, r1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_I2C_Init+0x138>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1e59      	subs	r1, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c6:	e051      	b.n	800326c <HAL_I2C_Init+0x1dc>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e04f      	b.n	800326c <HAL_I2C_Init+0x1dc>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d111      	bne.n	80031f8 <HAL_I2C_Init+0x168>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e012      	b.n	800321e <HAL_I2C_Init+0x18e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x196>
 8003222:	2301      	movs	r3, #1
 8003224:	e022      	b.n	800326c <HAL_I2C_Init+0x1dc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10e      	bne.n	800324c <HAL_I2C_Init+0x1bc>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e58      	subs	r0, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	440b      	add	r3, r1
 800323c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324a:	e00f      	b.n	800326c <HAL_I2C_Init+0x1dc>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	0099      	lsls	r1, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	6809      	ldr	r1, [r1, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800329a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6911      	ldr	r1, [r2, #16]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	000186a0 	.word	0x000186a0
 8003308:	001e847f 	.word	0x001e847f
 800330c:	003d08ff 	.word	0x003d08ff
 8003310:	431bde83 	.word	0x431bde83
 8003314:	10624dd3 	.word	0x10624dd3

08003318 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	460b      	mov	r3, r1
 800332c:	813b      	strh	r3, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003332:	f7ff fb77 	bl	8002a24 <HAL_GetTick>
 8003336:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b20      	cmp	r3, #32
 8003342:	f040 80d9 	bne.w	80034f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2319      	movs	r3, #25
 800334c:	2201      	movs	r2, #1
 800334e:	496d      	ldr	r1, [pc, #436]	; (8003504 <HAL_I2C_Mem_Write+0x1ec>)
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fc7f 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
 800335e:	e0cc      	b.n	80034fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_I2C_Mem_Write+0x56>
 800336a:	2302      	movs	r3, #2
 800336c:	e0c5      	b.n	80034fa <HAL_I2C_Mem_Write+0x1e2>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d007      	beq.n	8003394 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2221      	movs	r2, #33	; 0x21
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a4d      	ldr	r2, [pc, #308]	; (8003508 <HAL_I2C_Mem_Write+0x1f0>)
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d6:	88f8      	ldrh	r0, [r7, #6]
 80033d8:	893a      	ldrh	r2, [r7, #8]
 80033da:	8979      	ldrh	r1, [r7, #10]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	4603      	mov	r3, r0
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fab6 	bl	8003958 <I2C_RequestMemoryWrite>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d052      	beq.n	8003498 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e081      	b.n	80034fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fd00 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b04      	cmp	r3, #4
 800340c:	d107      	bne.n	800341e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e06b      	b.n	80034fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d11b      	bne.n	8003498 <HAL_I2C_Mem_Write+0x180>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	d017      	beq.n	8003498 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1aa      	bne.n	80033f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fcec 	bl	8003e82 <I2C_WaitOnBTFFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e016      	b.n	80034fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	00100002 	.word	0x00100002
 8003508:	ffff0000 	.word	0xffff0000

0800350c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08c      	sub	sp, #48	; 0x30
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	817b      	strh	r3, [r7, #10]
 800351e:	460b      	mov	r3, r1
 8003520:	813b      	strh	r3, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003526:	f7ff fa7d 	bl	8002a24 <HAL_GetTick>
 800352a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	f040 8208 	bne.w	800394a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2319      	movs	r3, #25
 8003540:	2201      	movs	r2, #1
 8003542:	497b      	ldr	r1, [pc, #492]	; (8003730 <HAL_I2C_Mem_Read+0x224>)
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fb85 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
 8003552:	e1fb      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_I2C_Mem_Read+0x56>
 800355e:	2302      	movs	r3, #2
 8003560:	e1f4      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d007      	beq.n	8003588 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2222      	movs	r2, #34	; 0x22
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2240      	movs	r2, #64	; 0x40
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a5b      	ldr	r2, [pc, #364]	; (8003734 <HAL_I2C_Mem_Read+0x228>)
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ca:	88f8      	ldrh	r0, [r7, #6]
 80035cc:	893a      	ldrh	r2, [r7, #8]
 80035ce:	8979      	ldrh	r1, [r7, #10]
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4603      	mov	r3, r0
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fa52 	bl	8003a84 <I2C_RequestMemoryRead>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1b0      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d113      	bne.n	800361a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e184      	b.n	8003924 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	2b01      	cmp	r3, #1
 8003620:	d11b      	bne.n	800365a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e164      	b.n	8003924 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	2b02      	cmp	r3, #2
 8003660:	d11b      	bne.n	800369a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	e144      	b.n	8003924 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036b0:	e138      	b.n	8003924 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	f200 80f1 	bhi.w	800389e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d123      	bne.n	800370c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fc1b 	bl	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e139      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
 800370a:	e10b      	b.n	8003924 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	2b02      	cmp	r3, #2
 8003712:	d14e      	bne.n	80037b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	2200      	movs	r2, #0
 800371c:	4906      	ldr	r1, [pc, #24]	; (8003738 <HAL_I2C_Mem_Read+0x22c>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa98 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e10e      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000
 8003738:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b0:	e0b8      	b.n	8003924 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2200      	movs	r2, #0
 80037ba:	4966      	ldr	r1, [pc, #408]	; (8003954 <HAL_I2C_Mem_Read+0x448>)
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fa49 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0bf      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2200      	movs	r2, #0
 8003816:	494f      	ldr	r1, [pc, #316]	; (8003954 <HAL_I2C_Mem_Read+0x448>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fa1b 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e091      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800389c:	e042      	b.n	8003924 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fb2e 	bl	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e04c      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d118      	bne.n	8003924 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f aec2 	bne.w	80036b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
  }
}
 800394c:	4618      	mov	r0, r3
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010004 	.word	0x00010004

08003958 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	461a      	mov	r2, r3
 8003966:	4603      	mov	r3, r0
 8003968:	817b      	strh	r3, [r7, #10]
 800396a:	460b      	mov	r3, r1
 800396c:	813b      	strh	r3, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	2200      	movs	r2, #0
 800398a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f960 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d103      	bne.n	80039b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e05f      	b.n	8003a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039b6:	897b      	ldrh	r3, [r7, #10]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	492d      	ldr	r1, [pc, #180]	; (8003a80 <I2C_RequestMemoryWrite+0x128>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f998 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e04c      	b.n	8003a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	6a39      	ldr	r1, [r7, #32]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fa02 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d107      	bne.n	8003a1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e02b      	b.n	8003a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d105      	bne.n	8003a30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	611a      	str	r2, [r3, #16]
 8003a2e:	e021      	b.n	8003a74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	6a39      	ldr	r1, [r7, #32]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f9dc 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d107      	bne.n	8003a66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e005      	b.n	8003a76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6a:	893b      	ldrh	r3, [r7, #8]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	00010002 	.word	0x00010002

08003a84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	817b      	strh	r3, [r7, #10]
 8003a96:	460b      	mov	r3, r1
 8003a98:	813b      	strh	r3, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f8c2 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae4:	d103      	bne.n	8003aee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0aa      	b.n	8003c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	4952      	ldr	r1, [pc, #328]	; (8003c50 <I2C_RequestMemoryRead+0x1cc>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f8fa 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e097      	b.n	8003c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	6a39      	ldr	r1, [r7, #32]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f964 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d107      	bne.n	8003b56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e076      	b.n	8003c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	e021      	b.n	8003bb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b6c:	893b      	ldrh	r3, [r7, #8]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f93e 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e050      	b.n	8003c48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba6:	893b      	ldrh	r3, [r7, #8]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	6a39      	ldr	r1, [r7, #32]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f923 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d107      	bne.n	8003bd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e035      	b.n	8003c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f82b 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c12:	d103      	bne.n	8003c1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e013      	b.n	8003c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c20:	897b      	ldrh	r3, [r7, #10]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	4906      	ldr	r1, [pc, #24]	; (8003c50 <I2C_RequestMemoryRead+0x1cc>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f863 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	00010002 	.word	0x00010002

08003c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c64:	e025      	b.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d021      	beq.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fe fed9 	bl	8002a24 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e023      	b.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10d      	bne.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	e00c      	b.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d0b6      	beq.n	8003c66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d10:	e051      	b.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d123      	bne.n	8003d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f043 0204 	orr.w	r2, r3, #4
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e046      	b.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d021      	beq.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fe fe57 	bl	8002a24 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d116      	bne.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e020      	b.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10c      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e00b      	b.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	43da      	mvns	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d18d      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e0c:	e02d      	b.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f8ce 	bl	8003fb0 <I2C_IsAcknowledgeFailed>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02d      	b.n	8003e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d021      	beq.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe fdfd 	bl	8002a24 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e007      	b.n	8003e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d1ca      	bne.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e8e:	e02d      	b.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f88d 	bl	8003fb0 <I2C_IsAcknowledgeFailed>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e02d      	b.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d021      	beq.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fe fdbc 	bl	8002a24 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d116      	bne.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d1ca      	bne.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f10:	e042      	b.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d119      	bne.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0210 	mvn.w	r2, #16
 8003f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e029      	b.n	8003fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7fe fd66 	bl	8002a24 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e007      	b.n	8003fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d1b5      	bne.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d11b      	bne.n	8004000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f043 0204 	orr.w	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e264      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d075      	beq.n	800411a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402e:	4ba3      	ldr	r3, [pc, #652]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d00c      	beq.n	8004054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403a:	4ba0      	ldr	r3, [pc, #640]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004042:	2b08      	cmp	r3, #8
 8004044:	d112      	bne.n	800406c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004046:	4b9d      	ldr	r3, [pc, #628]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004052:	d10b      	bne.n	800406c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	4b99      	ldr	r3, [pc, #612]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05b      	beq.n	8004118 <HAL_RCC_OscConfig+0x108>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d157      	bne.n	8004118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e23f      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d106      	bne.n	8004084 <HAL_RCC_OscConfig+0x74>
 8004076:	4b91      	ldr	r3, [pc, #580]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a90      	ldr	r2, [pc, #576]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e01d      	b.n	80040c0 <HAL_RCC_OscConfig+0xb0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x98>
 800408e:	4b8b      	ldr	r3, [pc, #556]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a8a      	ldr	r2, [pc, #552]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b88      	ldr	r3, [pc, #544]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a87      	ldr	r2, [pc, #540]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0xb0>
 80040a8:	4b84      	ldr	r3, [pc, #528]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a83      	ldr	r2, [pc, #524]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a80      	ldr	r2, [pc, #512]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fe fcac 	bl	8002a24 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe fca8 	bl	8002a24 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e204      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b76      	ldr	r3, [pc, #472]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0xc0>
 80040ee:	e014      	b.n	800411a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe fc98 	bl	8002a24 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fe fc94 	bl	8002a24 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e1f0      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410a:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0xe8>
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d063      	beq.n	80041ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004126:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004132:	4b62      	ldr	r3, [pc, #392]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413a:	2b08      	cmp	r3, #8
 800413c:	d11c      	bne.n	8004178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_RCC_OscConfig+0x152>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e1c4      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004162:	4b56      	ldr	r3, [pc, #344]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4952      	ldr	r1, [pc, #328]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004176:	e03a      	b.n	80041ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004180:	4b4f      	ldr	r3, [pc, #316]	; (80042c0 <HAL_RCC_OscConfig+0x2b0>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fe fc4d 	bl	8002a24 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418e:	f7fe fc49 	bl	8002a24 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e1a5      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a0:	4b46      	ldr	r3, [pc, #280]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b43      	ldr	r3, [pc, #268]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4940      	ldr	r1, [pc, #256]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]
 80041c0:	e015      	b.n	80041ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <HAL_RCC_OscConfig+0x2b0>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe fc2c 	bl	8002a24 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fe fc28 	bl	8002a24 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e184      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e2:	4b36      	ldr	r3, [pc, #216]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d030      	beq.n	800425c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d016      	beq.n	8004230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004202:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_RCC_OscConfig+0x2b4>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fe fc0c 	bl	8002a24 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004210:	f7fe fc08 	bl	8002a24 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e164      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x200>
 800422e:	e015      	b.n	800425c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x2b4>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004236:	f7fe fbf5 	bl	8002a24 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423e:	f7fe fbf1 	bl	8002a24 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e14d      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80a0 	beq.w	80043aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_OscConfig+0x2b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d121      	bne.n	80042ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_RCC_OscConfig+0x2b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <HAL_RCC_OscConfig+0x2b8>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fbb7 	bl	8002a24 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	e011      	b.n	80042de <HAL_RCC_OscConfig+0x2ce>
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470000 	.word	0x42470000
 80042c4:	42470e80 	.word	0x42470e80
 80042c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042cc:	f7fe fbaa 	bl	8002a24 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e106      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042de:	4b85      	ldr	r3, [pc, #532]	; (80044f4 <HAL_RCC_OscConfig+0x4e4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d106      	bne.n	8004300 <HAL_RCC_OscConfig+0x2f0>
 80042f2:	4b81      	ldr	r3, [pc, #516]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a80      	ldr	r2, [pc, #512]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	e01c      	b.n	800433a <HAL_RCC_OscConfig+0x32a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b05      	cmp	r3, #5
 8004306:	d10c      	bne.n	8004322 <HAL_RCC_OscConfig+0x312>
 8004308:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a7a      	ldr	r2, [pc, #488]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	4b78      	ldr	r3, [pc, #480]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a77      	ldr	r2, [pc, #476]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	e00b      	b.n	800433a <HAL_RCC_OscConfig+0x32a>
 8004322:	4b75      	ldr	r3, [pc, #468]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	4a74      	ldr	r2, [pc, #464]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6713      	str	r3, [r2, #112]	; 0x70
 800432e:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a71      	ldr	r2, [pc, #452]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d015      	beq.n	800436e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fe fb6f 	bl	8002a24 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fe fb6b 	bl	8002a24 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0c5      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ee      	beq.n	800434a <HAL_RCC_OscConfig+0x33a>
 800436c:	e014      	b.n	8004398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fe fb59 	bl	8002a24 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fe fb55 	bl	8002a24 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	; 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0af      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438c:	4b5a      	ldr	r3, [pc, #360]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ee      	bne.n	8004376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d105      	bne.n	80043aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439e:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	4a55      	ldr	r2, [pc, #340]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 809b 	beq.w	80044ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d05c      	beq.n	800447a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d141      	bne.n	800444c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c8:	4b4c      	ldr	r3, [pc, #304]	; (80044fc <HAL_RCC_OscConfig+0x4ec>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe fb29 	bl	8002a24 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fe fb25 	bl	8002a24 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e081      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e8:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	019b      	lsls	r3, r3, #6
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	3b01      	subs	r3, #1
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	4937      	ldr	r1, [pc, #220]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441e:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x4ec>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fe fafe 	bl	8002a24 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fe fafa 	bl	8002a24 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e056      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443e:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x41c>
 800444a:	e04e      	b.n	80044ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x4ec>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fe fae7 	bl	8002a24 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445a:	f7fe fae3 	bl	8002a24 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e03f      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446c:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x44a>
 8004478:	e037      	b.n	80044ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e032      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <HAL_RCC_OscConfig+0x4e8>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d028      	beq.n	80044e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d121      	bne.n	80044e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d11a      	bne.n	80044e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044b6:	4013      	ands	r3, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044be:	4293      	cmp	r3, r2
 80044c0:	d111      	bne.n	80044e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	3b01      	subs	r3, #1
 80044d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40007000 	.word	0x40007000
 80044f8:	40023800 	.word	0x40023800
 80044fc:	42470060 	.word	0x42470060

08004500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0cc      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004514:	4b68      	ldr	r3, [pc, #416]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d90c      	bls.n	800453c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b65      	ldr	r3, [pc, #404]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0b8      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d020      	beq.n	800458a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004554:	4b59      	ldr	r3, [pc, #356]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a58      	ldr	r2, [pc, #352]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800455e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800456c:	4b53      	ldr	r3, [pc, #332]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4a52      	ldr	r2, [pc, #328]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	494d      	ldr	r1, [pc, #308]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d044      	beq.n	8004620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d119      	bne.n	80045de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e07f      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d003      	beq.n	80045be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e06f      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ce:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e067      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f023 0203 	bic.w	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4934      	ldr	r1, [pc, #208]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f0:	f7fe fa18 	bl	8002a24 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	e00a      	b.n	800460e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fe fa14 	bl	8002a24 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e04f      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460e:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 020c 	and.w	r2, r3, #12
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	429a      	cmp	r2, r3
 800461e:	d1eb      	bne.n	80045f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004620:	4b25      	ldr	r3, [pc, #148]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d20c      	bcs.n	8004648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e032      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4916      	ldr	r1, [pc, #88]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	490e      	ldr	r1, [pc, #56]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004686:	f000 f821 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 800468a:	4602      	mov	r2, r0
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	490a      	ldr	r1, [pc, #40]	; (80046c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	5ccb      	ldrb	r3, [r1, r3]
 800469a:	fa22 f303 	lsr.w	r3, r2, r3
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe f892 	bl	80027d0 <HAL_InitTick>

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023c00 	.word	0x40023c00
 80046bc:	40023800 	.word	0x40023800
 80046c0:	080087cc 	.word	0x080087cc
 80046c4:	20000000 	.word	0x20000000
 80046c8:	20000004 	.word	0x20000004

080046cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	2300      	movs	r3, #0
 80046de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e4:	4b67      	ldr	r3, [pc, #412]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d00d      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0x40>
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	f200 80bd 	bhi.w	8004870 <HAL_RCC_GetSysClockFreq+0x1a4>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x34>
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x3a>
 80046fe:	e0b7      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004700:	4b61      	ldr	r3, [pc, #388]	; (8004888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004702:	60bb      	str	r3, [r7, #8]
       break;
 8004704:	e0b7      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004708:	60bb      	str	r3, [r7, #8]
      break;
 800470a:	e0b4      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800470c:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004714:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004716:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04d      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004722:	4b58      	ldr	r3, [pc, #352]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	461a      	mov	r2, r3
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	ea02 0800 	and.w	r8, r2, r0
 800473a:	ea03 0901 	and.w	r9, r3, r1
 800473e:	4640      	mov	r0, r8
 8004740:	4649      	mov	r1, r9
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	014b      	lsls	r3, r1, #5
 800474c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004750:	0142      	lsls	r2, r0, #5
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	ebb0 0008 	subs.w	r0, r0, r8
 800475a:	eb61 0109 	sbc.w	r1, r1, r9
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	018b      	lsls	r3, r1, #6
 8004768:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800476c:	0182      	lsls	r2, r0, #6
 800476e:	1a12      	subs	r2, r2, r0
 8004770:	eb63 0301 	sbc.w	r3, r3, r1
 8004774:	f04f 0000 	mov.w	r0, #0
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	00d9      	lsls	r1, r3, #3
 800477e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004782:	00d0      	lsls	r0, r2, #3
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	eb12 0208 	adds.w	r2, r2, r8
 800478c:	eb43 0309 	adc.w	r3, r3, r9
 8004790:	f04f 0000 	mov.w	r0, #0
 8004794:	f04f 0100 	mov.w	r1, #0
 8004798:	0259      	lsls	r1, r3, #9
 800479a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800479e:	0250      	lsls	r0, r2, #9
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	f7fc f9dc 	bl	8000b6c <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e04a      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047be:	4b31      	ldr	r3, [pc, #196]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	461a      	mov	r2, r3
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	ea02 0400 	and.w	r4, r2, r0
 80047d6:	ea03 0501 	and.w	r5, r3, r1
 80047da:	4620      	mov	r0, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	014b      	lsls	r3, r1, #5
 80047e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047ec:	0142      	lsls	r2, r0, #5
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	1b00      	subs	r0, r0, r4
 80047f4:	eb61 0105 	sbc.w	r1, r1, r5
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	018b      	lsls	r3, r1, #6
 8004802:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004806:	0182      	lsls	r2, r0, #6
 8004808:	1a12      	subs	r2, r2, r0
 800480a:	eb63 0301 	sbc.w	r3, r3, r1
 800480e:	f04f 0000 	mov.w	r0, #0
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	00d9      	lsls	r1, r3, #3
 8004818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800481c:	00d0      	lsls	r0, r2, #3
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	1912      	adds	r2, r2, r4
 8004824:	eb45 0303 	adc.w	r3, r5, r3
 8004828:	f04f 0000 	mov.w	r0, #0
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	0299      	lsls	r1, r3, #10
 8004832:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004836:	0290      	lsls	r0, r2, #10
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	461a      	mov	r2, r3
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	f7fc f990 	bl	8000b6c <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4613      	mov	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	3301      	adds	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	60bb      	str	r3, [r7, #8]
      break;
 800486e:	e002      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004872:	60bb      	str	r3, [r7, #8]
      break;
 8004874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004876:	68bb      	ldr	r3, [r7, #8]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	00f42400 	.word	0x00f42400
 800488c:	007a1200 	.word	0x007a1200

08004890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000000 	.word	0x20000000

080048a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048ac:	f7ff fff0 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0a9b      	lsrs	r3, r3, #10
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4903      	ldr	r1, [pc, #12]	; (80048cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	080087dc 	.word	0x080087dc

080048d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048d4:	f7ff ffdc 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0b5b      	lsrs	r3, r3, #13
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4903      	ldr	r1, [pc, #12]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	080087dc 	.word	0x080087dc

080048f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	220f      	movs	r2, #15
 8004906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0203 	and.w	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	08db      	lsrs	r3, r3, #3
 8004932:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_RCC_GetClockConfig+0x60>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0207 	and.w	r2, r3, #7
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	601a      	str	r2, [r3, #0]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	40023c00 	.word	0x40023c00

0800495c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e041      	b.n	80049f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd fe02 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fc14 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d001      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e04e      	b.n	8004ab2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d022      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x80>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d01d      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d018      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x80>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x80>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_TIM_Base_Start_IT+0xd0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x80>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x80>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x80>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d111      	bne.n	8004aa0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d010      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9e:	e007      	b.n	8004ab0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40000c00 	.word	0x40000c00
 8004ad0:	40010400 	.word	0x40010400
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40001800 	.word	0x40001800

08004adc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e041      	b.n	8004b72 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f839 	bl	8004b7a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f000 fb54 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_TIM_OC_Start+0x24>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	e022      	b.n	8004bfa <HAL_TIM_OC_Start+0x6a>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d109      	bne.n	8004bce <HAL_TIM_OC_Start+0x3e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	bf14      	ite	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	2300      	moveq	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e015      	b.n	8004bfa <HAL_TIM_OC_Start+0x6a>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d109      	bne.n	8004be8 <HAL_TIM_OC_Start+0x58>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e008      	b.n	8004bfa <HAL_TIM_OC_Start+0x6a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e07c      	b.n	8004cfc <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_OC_Start+0x82>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c10:	e013      	b.n	8004c3a <HAL_TIM_OC_Start+0xaa>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_OC_Start+0x92>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c20:	e00b      	b.n	8004c3a <HAL_TIM_OC_Start+0xaa>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_OC_Start+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c30:	e003      	b.n	8004c3a <HAL_TIM_OC_Start+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	6839      	ldr	r1, [r7, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fdaa 	bl	800579c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <HAL_TIM_OC_Start+0x174>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_OC_Start+0xcc>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <HAL_TIM_OC_Start+0x178>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_OC_Start+0xd0>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_TIM_OC_Start+0xd2>
 8004c60:	2300      	movs	r3, #0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <HAL_TIM_OC_Start+0x174>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_TIM_OC_Start+0x136>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d01d      	beq.n	8004cc6 <HAL_TIM_OC_Start+0x136>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <HAL_TIM_OC_Start+0x17c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_TIM_OC_Start+0x136>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1d      	ldr	r2, [pc, #116]	; (8004d10 <HAL_TIM_OC_Start+0x180>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_TIM_OC_Start+0x136>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <HAL_TIM_OC_Start+0x184>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_TIM_OC_Start+0x136>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <HAL_TIM_OC_Start+0x178>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_TIM_OC_Start+0x136>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_TIM_OC_Start+0x188>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIM_OC_Start+0x136>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <HAL_TIM_OC_Start+0x18c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d111      	bne.n	8004cea <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b06      	cmp	r3, #6
 8004cd6:	d010      	beq.n	8004cfa <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	e007      	b.n	8004cfa <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40010400 	.word	0x40010400
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40000c00 	.word	0x40000c00
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40001800 	.word	0x40001800

08004d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa11 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa03 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa14 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0204 	mvn.w	r2, #4
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9e7 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f9d9 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f9ea 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0208 	mvn.w	r2, #8
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9bd 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f9af 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f9c0 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0210 	mvn.w	r2, #16
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f993 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f985 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f996 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10e      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0201 	mvn.w	r2, #1
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc ff8c 	bl	8001dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b80      	cmp	r3, #128	; 0x80
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fd12 	bl	80058f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f95b 	bl	80051b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d10e      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d107      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0220 	mvn.w	r2, #32
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fcdc 	bl	80058e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e048      	b.n	8004fe0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b0c      	cmp	r3, #12
 8004f5a:	d839      	bhi.n	8004fd0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004f5c:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004fd1 	.word	0x08004fd1
 8004f6c:	08004fd1 	.word	0x08004fd1
 8004f70:	08004fd1 	.word	0x08004fd1
 8004f74:	08004fa7 	.word	0x08004fa7
 8004f78:	08004fd1 	.word	0x08004fd1
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004fd1 	.word	0x08004fd1
 8004f84:	08004fb5 	.word	0x08004fb5
 8004f88:	08004fd1 	.word	0x08004fd1
 8004f8c:	08004fd1 	.word	0x08004fd1
 8004f90:	08004fd1 	.word	0x08004fd1
 8004f94:	08004fc3 	.word	0x08004fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f9b2 	bl	8005308 <TIM_OC1_SetConfig>
      break;
 8004fa4:	e017      	b.n	8004fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fa1b 	bl	80053e8 <TIM_OC2_SetConfig>
      break;
 8004fb2:	e010      	b.n	8004fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fa8a 	bl	80054d4 <TIM_OC3_SetConfig>
      break;
 8004fc0:	e009      	b.n	8004fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 faf7 	bl	80055bc <TIM_OC4_SetConfig>
      break;
 8004fce:	e002      	b.n	8004fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_ConfigClockSource+0x1c>
 8005000:	2302      	movs	r3, #2
 8005002:	e0b4      	b.n	800516e <HAL_TIM_ConfigClockSource+0x186>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800502a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503c:	d03e      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0xd4>
 800503e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005042:	f200 8087 	bhi.w	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504a:	f000 8086 	beq.w	800515a <HAL_TIM_ConfigClockSource+0x172>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d87f      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b70      	cmp	r3, #112	; 0x70
 8005056:	d01a      	beq.n	800508e <HAL_TIM_ConfigClockSource+0xa6>
 8005058:	2b70      	cmp	r3, #112	; 0x70
 800505a:	d87b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b60      	cmp	r3, #96	; 0x60
 800505e:	d050      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x11a>
 8005060:	2b60      	cmp	r3, #96	; 0x60
 8005062:	d877      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b50      	cmp	r3, #80	; 0x50
 8005066:	d03c      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005068:	2b50      	cmp	r3, #80	; 0x50
 800506a:	d873      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d058      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x13a>
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d86f      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b30      	cmp	r3, #48	; 0x30
 8005076:	d064      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	2b30      	cmp	r3, #48	; 0x30
 800507a:	d86b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d060      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	2b20      	cmp	r3, #32
 8005082:	d867      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05c      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	2b10      	cmp	r3, #16
 800508a:	d05a      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 800508c:	e062      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6899      	ldr	r1, [r3, #8]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f000 fb5d 	bl	800575c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	609a      	str	r2, [r3, #8]
      break;
 80050ba:	e04f      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6899      	ldr	r1, [r3, #8]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f000 fb46 	bl	800575c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050de:	609a      	str	r2, [r3, #8]
      break;
 80050e0:	e03c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f000 faba 	bl	8005668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2150      	movs	r1, #80	; 0x50
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fb13 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 8005100:	e02c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	461a      	mov	r2, r3
 8005110:	f000 fad9 	bl	80056c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2160      	movs	r1, #96	; 0x60
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb03 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 8005120:	e01c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	461a      	mov	r2, r3
 8005130:	f000 fa9a 	bl	8005668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2140      	movs	r1, #64	; 0x40
 800513a:	4618      	mov	r0, r3
 800513c:	f000 faf3 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 8005140:	e00c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f000 faea 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 8005152:	e003      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
      break;
 8005158:	e000      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800515a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a40      	ldr	r2, [pc, #256]	; (80052dc <TIM_Base_SetConfig+0x114>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d00f      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3d      	ldr	r2, [pc, #244]	; (80052e0 <TIM_Base_SetConfig+0x118>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3c      	ldr	r2, [pc, #240]	; (80052e4 <TIM_Base_SetConfig+0x11c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3b      	ldr	r2, [pc, #236]	; (80052e8 <TIM_Base_SetConfig+0x120>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3a      	ldr	r2, [pc, #232]	; (80052ec <TIM_Base_SetConfig+0x124>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <TIM_Base_SetConfig+0x114>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d027      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <TIM_Base_SetConfig+0x118>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d023      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <TIM_Base_SetConfig+0x11c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <TIM_Base_SetConfig+0x120>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a29      	ldr	r2, [pc, #164]	; (80052ec <TIM_Base_SetConfig+0x124>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a28      	ldr	r2, [pc, #160]	; (80052f0 <TIM_Base_SetConfig+0x128>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <TIM_Base_SetConfig+0x12c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00f      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <TIM_Base_SetConfig+0x130>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a25      	ldr	r2, [pc, #148]	; (80052fc <TIM_Base_SetConfig+0x134>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a24      	ldr	r2, [pc, #144]	; (8005300 <TIM_Base_SetConfig+0x138>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a23      	ldr	r2, [pc, #140]	; (8005304 <TIM_Base_SetConfig+0x13c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <TIM_Base_SetConfig+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0xf8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <TIM_Base_SetConfig+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800
 80052fc:	40001800 	.word	0x40001800
 8005300:	40001c00 	.word	0x40001c00
 8005304:	40002000 	.word	0x40002000

08005308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <TIM_OC1_SetConfig+0xd8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC1_SetConfig+0x64>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <TIM_OC1_SetConfig+0xdc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10c      	bne.n	8005386 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0308 	bic.w	r3, r3, #8
 8005372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <TIM_OC1_SetConfig+0xd8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_OC1_SetConfig+0x8e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <TIM_OC1_SetConfig+0xdc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d111      	bne.n	80053ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40010400 	.word	0x40010400

080053e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0210 	bic.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0320 	bic.w	r3, r3, #32
 8005432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a22      	ldr	r2, [pc, #136]	; (80054cc <TIM_OC2_SetConfig+0xe4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC2_SetConfig+0x68>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <TIM_OC2_SetConfig+0xe8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10d      	bne.n	800546c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <TIM_OC2_SetConfig+0xe4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC2_SetConfig+0x94>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <TIM_OC2_SetConfig+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d113      	bne.n	80054a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400

080054d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_OC3_SetConfig+0xe0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_OC3_SetConfig+0x66>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <TIM_OC3_SetConfig+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10d      	bne.n	8005556 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <TIM_OC3_SetConfig+0xe0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_OC3_SetConfig+0x92>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <TIM_OC3_SetConfig+0xe4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d113      	bne.n	800558e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800556c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400

080055bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <TIM_OC4_SetConfig+0xa4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_OC4_SetConfig+0x68>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a11      	ldr	r2, [pc, #68]	; (8005664 <TIM_OC4_SetConfig+0xa8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d109      	bne.n	8005638 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	019b      	lsls	r3, r3, #6
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40010400 	.word	0x40010400

08005668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 030a 	bic.w	r3, r3, #10
 80056a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f023 0210 	bic.w	r2, r3, #16
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	031b      	lsls	r3, r3, #12
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	f043 0307 	orr.w	r3, r3, #7
 8005748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	609a      	str	r2, [r3, #8]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	021a      	lsls	r2, r3, #8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	431a      	orrs	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4313      	orrs	r3, r2
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	609a      	str	r2, [r3, #8]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	2201      	movs	r2, #1
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	43db      	mvns	r3, r3
 80057be:	401a      	ands	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	431a      	orrs	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e05a      	b.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d01d      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a15      	ldr	r2, [pc, #84]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10c      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4313      	orrs	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40001800 	.word	0x40001800

080058e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e04a      	b.n	80059b0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d111      	bne.n	800594a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fd1a 	bl	8006368 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_UART_Init+0xb0>)
 8005940:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	; 0x24
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005960:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 ff7e 	bl	8006864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005976:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005986:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005996:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	08002685 	.word	0x08002685

080059bc <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e06a      	b.n	8005aaa <HAL_MultiProcessor_Init+0xee>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d111      	bne.n	8005a04 <HAL_MultiProcessor_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fcbd 	bl	8006368 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <HAL_MultiProcessor_Init+0x40>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a2e      	ldr	r2, [pc, #184]	; (8005ab4 <HAL_MultiProcessor_Init+0xf8>)
 80059fa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2224      	movs	r2, #36	; 0x24
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 ff21 	bl	8006864 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a40:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 020f 	bic.w	r2, r2, #15
 8005a50:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6919      	ldr	r1, [r3, #16]
 8005a58:	7afa      	ldrb	r2, [r7, #11]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a70:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68d9      	ldr	r1, [r3, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	08002685 	.word	0x08002685

08005ab8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e08c      	b.n	8005bfa <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_UART_RegisterCallback+0x36>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e085      	b.n	8005bfa <HAL_UART_RegisterCallback+0x142>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d151      	bne.n	8005ba6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d845      	bhi.n	8005b94 <HAL_UART_RegisterCallback+0xdc>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_UART_RegisterCallback+0x58>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005b4d 	.word	0x08005b4d
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b5d 	.word	0x08005b5d
 8005b20:	08005b65 	.word	0x08005b65
 8005b24:	08005b6d 	.word	0x08005b6d
 8005b28:	08005b75 	.word	0x08005b75
 8005b2c:	08005b7d 	.word	0x08005b7d
 8005b30:	08005b95 	.word	0x08005b95
 8005b34:	08005b95 	.word	0x08005b95
 8005b38:	08005b95 	.word	0x08005b95
 8005b3c:	08005b85 	.word	0x08005b85
 8005b40:	08005b8d 	.word	0x08005b8d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8005b4a:	e051      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005b52:	e04d      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005b5a:	e049      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005b62:	e045      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005b6a:	e041      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005b72:	e03d      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005b7a:	e039      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005b82:	e035      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005b8a:	e031      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005b92:	e02d      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	f043 0220 	orr.w	r2, r3, #32
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
        break;
 8005ba4:	e024      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d116      	bne.n	8005be0 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
 8005bb4:	2b0b      	cmp	r3, #11
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_RegisterCallback+0x106>
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	d004      	beq.n	8005bc6 <HAL_UART_RegisterCallback+0x10e>
 8005bbc:	e007      	b.n	8005bce <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005bc4:	e014      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005bcc:	e010      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
        break;
 8005bde:	e007      	b.n	8005bf0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	; 0x28
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d17c      	bne.n	8005d22 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_UART_Transmit+0x2c>
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e075      	b.n	8005d24 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_UART_Transmit+0x3e>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e06e      	b.n	8005d24 <HAL_UART_Transmit+0x11c>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2221      	movs	r2, #33	; 0x21
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c5c:	f7fc fee2 	bl	8002a24 <HAL_GetTick>
 8005c60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c76:	d108      	bne.n	8005c8a <HAL_UART_Transmit+0x82>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e003      	b.n	8005c92 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c9a:	e02a      	b.n	8005cf2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fb96 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e036      	b.n	8005d24 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	3302      	adds	r3, #2
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e007      	b.n	8005ce4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1cf      	bne.n	8005c9c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2140      	movs	r1, #64	; 0x40
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fb66 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e006      	b.n	8005d24 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e000      	b.n	8005d24 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d22:	2302      	movs	r3, #2
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d11d      	bne.n	8005d82 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_UART_Receive_IT+0x26>
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e016      	b.n	8005d84 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_UART_Receive_IT+0x38>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e00f      	b.n	8005d84 <HAL_UART_Receive_IT+0x58>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	461a      	mov	r2, r3
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fb9b 	bl	80064b4 <UART_Start_Receive_IT>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	e000      	b.n	8005d84 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b0ba      	sub	sp, #232	; 0xe8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10f      	bne.n	8005df2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <HAL_UART_IRQHandler+0x66>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fc7d 	bl	80066ea <UART_Receive_IT>
      return;
 8005df0:	e25b      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80e1 	beq.w	8005fbe <HAL_UART_IRQHandler+0x232>
 8005dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80d4 	beq.w	8005fbe <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HAL_UART_IRQHandler+0xae>
 8005e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f043 0201 	orr.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <HAL_UART_IRQHandler+0xd2>
 8005e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f043 0202 	orr.w	r2, r3, #2
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <HAL_UART_IRQHandler+0xf6>
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f043 0204 	orr.w	r2, r3, #4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d011      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x126>
 8005e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f043 0208 	orr.w	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 81f2 	beq.w	80062a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_UART_IRQHandler+0x14e>
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fc08 	bl	80066ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_UART_IRQHandler+0x17a>
 8005efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d051      	beq.n	8005faa <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fb0e 	bl	8006528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b40      	cmp	r3, #64	; 0x40
 8005f18:	d142      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3314      	adds	r3, #20
 8005f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1d9      	bne.n	8005f1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d013      	beq.n	8005f96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	4a7f      	ldr	r2, [pc, #508]	; (8006170 <HAL_UART_IRQHandler+0x3e4>)
 8005f74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fc feb0 	bl	8002ce0 <HAL_DMA_Abort_IT>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d019      	beq.n	8005fba <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f94:	e011      	b.n	8005fba <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9e:	e00c      	b.n	8005fba <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa8:	e007      	b.n	8005fba <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fb8:	e172      	b.n	80062a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fba:	bf00      	nop
    return;
 8005fbc:	e170      	b.n	80062a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	f040 814c 	bne.w	8006260 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8145 	beq.w	8006260 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 813e 	beq.w	8006260 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60bb      	str	r3, [r7, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	f040 80b5 	bne.w	8006174 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006016:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8142 	beq.w	80062a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006024:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006028:	429a      	cmp	r2, r3
 800602a:	f080 813b 	bcs.w	80062a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006034:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006040:	f000 8088 	beq.w	8006154 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800605a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800605e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006062:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006070:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800607c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1d9      	bne.n	8006044 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e1      	bne.n	8006090 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e3      	bne.n	80060cc <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006124:	f023 0310 	bic.w	r3, r3, #16
 8006128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006136:	65ba      	str	r2, [r7, #88]	; 0x58
 8006138:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800613c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e3      	bne.n	8006112 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc fd56 	bl	8002c00 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006160:	b292      	uxth	r2, r2
 8006162:	1a8a      	subs	r2, r1, r2
 8006164:	b292      	uxth	r2, r2
 8006166:	4611      	mov	r1, r2
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800616c:	e09a      	b.n	80062a4 <HAL_UART_IRQHandler+0x518>
 800616e:	bf00      	nop
 8006170:	080065ef 	.word	0x080065ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800617c:	b29b      	uxth	r3, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 808c 	beq.w	80062a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8087 	beq.w	80062a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061be:	647a      	str	r2, [r7, #68]	; 0x44
 80061c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e3      	bne.n	800619a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3314      	adds	r3, #20
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	623b      	str	r3, [r7, #32]
   return(result);
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3314      	adds	r3, #20
 80061f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061f6:	633a      	str	r2, [r7, #48]	; 0x30
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e3      	bne.n	80061d2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60fb      	str	r3, [r7, #12]
   return(result);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800623c:	61fa      	str	r2, [r7, #28]
 800623e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69b9      	ldr	r1, [r7, #24]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	617b      	str	r3, [r7, #20]
   return(result);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e3      	bne.n	8006218 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006254:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006258:	4611      	mov	r1, r2
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800625e:	e023      	b.n	80062a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <HAL_UART_IRQHandler+0x4f4>
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f9cd 	bl	8006618 <UART_Transmit_IT>
    return;
 800627e:	e014      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00e      	beq.n	80062aa <HAL_UART_IRQHandler+0x51e>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa0d 	bl	80066b8 <UART_EndTransmit_IT>
    return;
 800629e:	e004      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
    return;
 80062a0:	bf00      	nop
 80062a2:	e002      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
      return;
 80062a4:	bf00      	nop
 80062a6:	e000      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
      return;
 80062a8:	bf00      	nop
  }
}
 80062aa:	37e8      	adds	r7, #232	; 0xe8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <UART_InitCallbacksToDefault+0x4c>)
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <UART_InitCallbacksToDefault+0x50>)
 800637a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a0f      	ldr	r2, [pc, #60]	; (80063bc <UART_InitCallbacksToDefault+0x54>)
 8006380:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a0e      	ldr	r2, [pc, #56]	; (80063c0 <UART_InitCallbacksToDefault+0x58>)
 8006386:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <UART_InitCallbacksToDefault+0x5c>)
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a0d      	ldr	r2, [pc, #52]	; (80063c8 <UART_InitCallbacksToDefault+0x60>)
 8006392:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a0d      	ldr	r2, [pc, #52]	; (80063cc <UART_InitCallbacksToDefault+0x64>)
 8006398:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a0c      	ldr	r2, [pc, #48]	; (80063d0 <UART_InitCallbacksToDefault+0x68>)
 800639e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <UART_InitCallbacksToDefault+0x6c>)
 80063a4:	669a      	str	r2, [r3, #104]	; 0x68

}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	080062c5 	.word	0x080062c5
 80063b8:	080062b1 	.word	0x080062b1
 80063bc:	080062ed 	.word	0x080062ed
 80063c0:	080062d9 	.word	0x080062d9
 80063c4:	08006301 	.word	0x08006301
 80063c8:	08006315 	.word	0x08006315
 80063cc:	08006329 	.word	0x08006329
 80063d0:	0800633d 	.word	0x0800633d
 80063d4:	08006351 	.word	0x08006351

080063d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b090      	sub	sp, #64	; 0x40
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e8:	e050      	b.n	800648c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d04c      	beq.n	800648c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <UART_WaitOnFlagUntilTimeout+0x30>
 80063f8:	f7fc fb14 	bl	8002a24 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006404:	429a      	cmp	r2, r3
 8006406:	d241      	bcs.n	800648c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006428:	637a      	str	r2, [r7, #52]	; 0x34
 800642a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800642e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e5      	bne.n	8006408 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3314      	adds	r3, #20
 8006442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	613b      	str	r3, [r7, #16]
   return(result);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	63bb      	str	r3, [r7, #56]	; 0x38
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3314      	adds	r3, #20
 800645a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645c:	623a      	str	r2, [r7, #32]
 800645e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	69f9      	ldr	r1, [r7, #28]
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	61bb      	str	r3, [r7, #24]
   return(result);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e5      	bne.n	800643c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e00f      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d09f      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3740      	adds	r7, #64	; 0x40
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2222      	movs	r2, #34	; 0x22
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695a      	ldr	r2, [r3, #20]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0220 	orr.w	r2, r2, #32
 8006518:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b095      	sub	sp, #84	; 0x54
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006550:	643a      	str	r2, [r7, #64]	; 0x40
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e5      	bne.n	8006530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3314      	adds	r3, #20
 800656a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	61fb      	str	r3, [r7, #28]
   return(result);
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	64bb      	str	r3, [r7, #72]	; 0x48
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006584:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800658a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e5      	bne.n	8006564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	2b01      	cmp	r3, #1
 800659e:	d119      	bne.n	80065d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	647b      	str	r3, [r7, #68]	; 0x44
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065c0:	61ba      	str	r2, [r7, #24]
 80065c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	613b      	str	r3, [r7, #16]
   return(result);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e5      	bne.n	80065a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065e2:	bf00      	nop
 80065e4:	3754      	adds	r7, #84	; 0x54
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b21      	cmp	r3, #33	; 0x21
 800662a:	d13e      	bne.n	80066aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	d114      	bne.n	8006660 <UART_Transmit_IT+0x48>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d110      	bne.n	8006660 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006652:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	1c9a      	adds	r2, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]
 800665e:	e008      	b.n	8006672 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6211      	str	r1, [r2, #32]
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29b      	uxth	r3, r3
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4619      	mov	r1, r3
 8006680:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10f      	bne.n	80066a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006694:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b08c      	sub	sp, #48	; 0x30
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b22      	cmp	r3, #34	; 0x22
 80066fc:	f040 80ad 	bne.w	800685a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006708:	d117      	bne.n	800673a <UART_Receive_IT+0x50>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d113      	bne.n	800673a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006728:	b29a      	uxth	r2, r3
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	1c9a      	adds	r2, r3, #2
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	629a      	str	r2, [r3, #40]	; 0x28
 8006738:	e026      	b.n	8006788 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674c:	d007      	beq.n	800675e <UART_Receive_IT+0x74>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <UART_Receive_IT+0x82>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	b2da      	uxtb	r2, r3
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	e008      	b.n	800677e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	4619      	mov	r1, r3
 8006796:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006798:	2b00      	cmp	r3, #0
 800679a:	d15c      	bne.n	8006856 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0220 	bic.w	r2, r2, #32
 80067aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d136      	bne.n	800684a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	613b      	str	r3, [r7, #16]
   return(result);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f023 0310 	bic.w	r3, r3, #16
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	330c      	adds	r3, #12
 8006800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006802:	623a      	str	r2, [r7, #32]
 8006804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	69f9      	ldr	r1, [r7, #28]
 8006808:	6a3a      	ldr	r2, [r7, #32]
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e5      	bne.n	80067e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b10      	cmp	r3, #16
 8006822:	d10a      	bne.n	800683a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006842:	4611      	mov	r1, r2
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
 8006848:	e003      	b.n	8006852 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e002      	b.n	800685c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800685a:	2302      	movs	r3, #2
  }
}
 800685c:	4618      	mov	r0, r3
 800685e:	3730      	adds	r7, #48	; 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	b09f      	sub	sp, #124	; 0x7c
 800686a:	af00      	add	r7, sp, #0
 800686c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800686e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687a:	68d9      	ldr	r1, [r3, #12]
 800687c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	ea40 0301 	orr.w	r3, r0, r1
 8006884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	431a      	orrs	r2, r3
 8006890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	431a      	orrs	r2, r3
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	4313      	orrs	r3, r2
 800689c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800689e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068a8:	f021 010c 	bic.w	r1, r1, #12
 80068ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b2:	430b      	orrs	r3, r1
 80068b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c2:	6999      	ldr	r1, [r3, #24]
 80068c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	ea40 0301 	orr.w	r3, r0, r1
 80068cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4bc5      	ldr	r3, [pc, #788]	; (8006be8 <UART_SetConfig+0x384>)
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d004      	beq.n	80068e2 <UART_SetConfig+0x7e>
 80068d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	4bc3      	ldr	r3, [pc, #780]	; (8006bec <UART_SetConfig+0x388>)
 80068de:	429a      	cmp	r2, r3
 80068e0:	d103      	bne.n	80068ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068e2:	f7fd fff5 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 80068e6:	6778      	str	r0, [r7, #116]	; 0x74
 80068e8:	e002      	b.n	80068f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068ea:	f7fd ffdd 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 80068ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f8:	f040 80b6 	bne.w	8006a68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068fe:	461c      	mov	r4, r3
 8006900:	f04f 0500 	mov.w	r5, #0
 8006904:	4622      	mov	r2, r4
 8006906:	462b      	mov	r3, r5
 8006908:	1891      	adds	r1, r2, r2
 800690a:	6439      	str	r1, [r7, #64]	; 0x40
 800690c:	415b      	adcs	r3, r3
 800690e:	647b      	str	r3, [r7, #68]	; 0x44
 8006910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006914:	1912      	adds	r2, r2, r4
 8006916:	eb45 0303 	adc.w	r3, r5, r3
 800691a:	f04f 0000 	mov.w	r0, #0
 800691e:	f04f 0100 	mov.w	r1, #0
 8006922:	00d9      	lsls	r1, r3, #3
 8006924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006928:	00d0      	lsls	r0, r2, #3
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	1911      	adds	r1, r2, r4
 8006930:	6639      	str	r1, [r7, #96]	; 0x60
 8006932:	416b      	adcs	r3, r5
 8006934:	667b      	str	r3, [r7, #100]	; 0x64
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	461a      	mov	r2, r3
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	1891      	adds	r1, r2, r2
 8006942:	63b9      	str	r1, [r7, #56]	; 0x38
 8006944:	415b      	adcs	r3, r3
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800694c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006950:	f7fa f90c 	bl	8000b6c <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4ba5      	ldr	r3, [pc, #660]	; (8006bf0 <UART_SetConfig+0x38c>)
 800695a:	fba3 2302 	umull	r2, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	011e      	lsls	r6, r3, #4
 8006962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006964:	461c      	mov	r4, r3
 8006966:	f04f 0500 	mov.w	r5, #0
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	1891      	adds	r1, r2, r2
 8006970:	6339      	str	r1, [r7, #48]	; 0x30
 8006972:	415b      	adcs	r3, r3
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
 8006976:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800697a:	1912      	adds	r2, r2, r4
 800697c:	eb45 0303 	adc.w	r3, r5, r3
 8006980:	f04f 0000 	mov.w	r0, #0
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	00d9      	lsls	r1, r3, #3
 800698a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800698e:	00d0      	lsls	r0, r2, #3
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	1911      	adds	r1, r2, r4
 8006996:	65b9      	str	r1, [r7, #88]	; 0x58
 8006998:	416b      	adcs	r3, r5
 800699a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	1891      	adds	r1, r2, r2
 80069a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80069aa:	415b      	adcs	r3, r3
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069b6:	f7fa f8d9 	bl	8000b6c <__aeabi_uldivmod>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4b8c      	ldr	r3, [pc, #560]	; (8006bf0 <UART_SetConfig+0x38c>)
 80069c0:	fba3 1302 	umull	r1, r3, r3, r2
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	2164      	movs	r1, #100	; 0x64
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	3332      	adds	r3, #50	; 0x32
 80069d2:	4a87      	ldr	r2, [pc, #540]	; (8006bf0 <UART_SetConfig+0x38c>)
 80069d4:	fba2 2303 	umull	r2, r3, r2, r3
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069e0:	441e      	add	r6, r3
 80069e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e4:	4618      	mov	r0, r3
 80069e6:	f04f 0100 	mov.w	r1, #0
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	1894      	adds	r4, r2, r2
 80069f0:	623c      	str	r4, [r7, #32]
 80069f2:	415b      	adcs	r3, r3
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
 80069f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069fa:	1812      	adds	r2, r2, r0
 80069fc:	eb41 0303 	adc.w	r3, r1, r3
 8006a00:	f04f 0400 	mov.w	r4, #0
 8006a04:	f04f 0500 	mov.w	r5, #0
 8006a08:	00dd      	lsls	r5, r3, #3
 8006a0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a0e:	00d4      	lsls	r4, r2, #3
 8006a10:	4622      	mov	r2, r4
 8006a12:	462b      	mov	r3, r5
 8006a14:	1814      	adds	r4, r2, r0
 8006a16:	653c      	str	r4, [r7, #80]	; 0x50
 8006a18:	414b      	adcs	r3, r1
 8006a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	461a      	mov	r2, r3
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	1891      	adds	r1, r2, r2
 8006a28:	61b9      	str	r1, [r7, #24]
 8006a2a:	415b      	adcs	r3, r3
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a36:	f7fa f899 	bl	8000b6c <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4b6c      	ldr	r3, [pc, #432]	; (8006bf0 <UART_SetConfig+0x38c>)
 8006a40:	fba3 1302 	umull	r1, r3, r3, r2
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	2164      	movs	r1, #100	; 0x64
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	3332      	adds	r3, #50	; 0x32
 8006a52:	4a67      	ldr	r2, [pc, #412]	; (8006bf0 <UART_SetConfig+0x38c>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f003 0207 	and.w	r2, r3, #7
 8006a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4432      	add	r2, r6
 8006a64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a66:	e0b9      	b.n	8006bdc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a6a:	461c      	mov	r4, r3
 8006a6c:	f04f 0500 	mov.w	r5, #0
 8006a70:	4622      	mov	r2, r4
 8006a72:	462b      	mov	r3, r5
 8006a74:	1891      	adds	r1, r2, r2
 8006a76:	6139      	str	r1, [r7, #16]
 8006a78:	415b      	adcs	r3, r3
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a80:	1912      	adds	r2, r2, r4
 8006a82:	eb45 0303 	adc.w	r3, r5, r3
 8006a86:	f04f 0000 	mov.w	r0, #0
 8006a8a:	f04f 0100 	mov.w	r1, #0
 8006a8e:	00d9      	lsls	r1, r3, #3
 8006a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a94:	00d0      	lsls	r0, r2, #3
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	eb12 0804 	adds.w	r8, r2, r4
 8006a9e:	eb43 0905 	adc.w	r9, r3, r5
 8006aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f04f 0100 	mov.w	r1, #0
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	008b      	lsls	r3, r1, #2
 8006ab6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006aba:	0082      	lsls	r2, r0, #2
 8006abc:	4640      	mov	r0, r8
 8006abe:	4649      	mov	r1, r9
 8006ac0:	f7fa f854 	bl	8000b6c <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4b49      	ldr	r3, [pc, #292]	; (8006bf0 <UART_SetConfig+0x38c>)
 8006aca:	fba3 2302 	umull	r2, r3, r3, r2
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	011e      	lsls	r6, r3, #4
 8006ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f04f 0100 	mov.w	r1, #0
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	1894      	adds	r4, r2, r2
 8006ae0:	60bc      	str	r4, [r7, #8]
 8006ae2:	415b      	adcs	r3, r3
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aea:	1812      	adds	r2, r2, r0
 8006aec:	eb41 0303 	adc.w	r3, r1, r3
 8006af0:	f04f 0400 	mov.w	r4, #0
 8006af4:	f04f 0500 	mov.w	r5, #0
 8006af8:	00dd      	lsls	r5, r3, #3
 8006afa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006afe:	00d4      	lsls	r4, r2, #3
 8006b00:	4622      	mov	r2, r4
 8006b02:	462b      	mov	r3, r5
 8006b04:	1814      	adds	r4, r2, r0
 8006b06:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b08:	414b      	adcs	r3, r1
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	008b      	lsls	r3, r1, #2
 8006b20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b24:	0082      	lsls	r2, r0, #2
 8006b26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b2a:	f7fa f81f 	bl	8000b6c <__aeabi_uldivmod>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4b2f      	ldr	r3, [pc, #188]	; (8006bf0 <UART_SetConfig+0x38c>)
 8006b34:	fba3 1302 	umull	r1, r3, r3, r2
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	2164      	movs	r1, #100	; 0x64
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	3332      	adds	r3, #50	; 0x32
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <UART_SetConfig+0x38c>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b52:	441e      	add	r6, r3
 8006b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b56:	4618      	mov	r0, r3
 8006b58:	f04f 0100 	mov.w	r1, #0
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	1894      	adds	r4, r2, r2
 8006b62:	603c      	str	r4, [r7, #0]
 8006b64:	415b      	adcs	r3, r3
 8006b66:	607b      	str	r3, [r7, #4]
 8006b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b6c:	1812      	adds	r2, r2, r0
 8006b6e:	eb41 0303 	adc.w	r3, r1, r3
 8006b72:	f04f 0400 	mov.w	r4, #0
 8006b76:	f04f 0500 	mov.w	r5, #0
 8006b7a:	00dd      	lsls	r5, r3, #3
 8006b7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b80:	00d4      	lsls	r4, r2, #3
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	eb12 0a00 	adds.w	sl, r2, r0
 8006b8a:	eb43 0b01 	adc.w	fp, r3, r1
 8006b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f04f 0100 	mov.w	r1, #0
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	008b      	lsls	r3, r1, #2
 8006ba2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ba6:	0082      	lsls	r2, r0, #2
 8006ba8:	4650      	mov	r0, sl
 8006baa:	4659      	mov	r1, fp
 8006bac:	f7f9 ffde 	bl	8000b6c <__aeabi_uldivmod>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4b0e      	ldr	r3, [pc, #56]	; (8006bf0 <UART_SetConfig+0x38c>)
 8006bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	2164      	movs	r1, #100	; 0x64
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	3332      	adds	r3, #50	; 0x32
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <UART_SetConfig+0x38c>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	f003 020f 	and.w	r2, r3, #15
 8006bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4432      	add	r2, r6
 8006bda:	609a      	str	r2, [r3, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	377c      	adds	r7, #124	; 0x7c
 8006be0:	46bd      	mov	sp, r7
 8006be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be6:	bf00      	nop
 8006be8:	40011000 	.word	0x40011000
 8006bec:	40011400 	.word	0x40011400
 8006bf0:	51eb851f 	.word	0x51eb851f

08006bf4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c06:	2b84      	cmp	r3, #132	; 0x84
 8006c08:	d005      	beq.n	8006c16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	3303      	adds	r3, #3
 8006c14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c16:	68fb      	ldr	r3, [r7, #12]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c2a:	f3ef 8305 	mrs	r3, IPSR
 8006c2e:	607b      	str	r3, [r7, #4]
  return(result);
 8006c30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf14      	ite	ne
 8006c36:	2301      	movne	r3, #1
 8006c38:	2300      	moveq	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c4c:	f000 fd36 	bl	80076bc <vTaskStartScheduler>
  
  return osOK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c58:	b089      	sub	sp, #36	; 0x24
 8006c5a:	af04      	add	r7, sp, #16
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d020      	beq.n	8006caa <osThreadCreate+0x54>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01c      	beq.n	8006caa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685c      	ldr	r4, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681d      	ldr	r5, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691e      	ldr	r6, [r3, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff ffb6 	bl	8006bf4 <makeFreeRtosPriority>
 8006c88:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c92:	9202      	str	r2, [sp, #8]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	9100      	str	r1, [sp, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 f932 	bl	8006f08 <xTaskCreateStatic>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e01c      	b.n	8006ce4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685c      	ldr	r4, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cb6:	b29e      	uxth	r6, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff ff98 	bl	8006bf4 <makeFreeRtosPriority>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f107 030c 	add.w	r3, r7, #12
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	9200      	str	r2, [sp, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 f974 	bl	8006fc2 <xTaskCreate>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d001      	beq.n	8006ce4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <osDelay+0x16>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	e000      	b.n	8006d06 <osDelay+0x18>
 8006d04:	2301      	movs	r3, #1
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fb10 	bl	800732c <vTaskDelay>
  
  return osOK;
 8006d0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fb38 	bl	8007394 <vTaskSuspend>
  
  return osOK;
 8006d24:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8006d38:	f7ff ff74 	bl	8006c24 <inHandlerMode>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fc48 	bl	80075d8 <xTaskResumeFromISR>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d10b      	bne.n	8006d66 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <osThreadResume+0x40>)
 8006d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	e002      	b.n	8006d66 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fbdb 	bl	800751c <vTaskResume>
  }
  return osOK;
 8006d66:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <osDelayUntil+0x18>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	e000      	b.n	8006d8e <osDelayUntil+0x1a>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa4d 	bl	8007230 <vTaskDelayUntil>
  
  return osOK;
 8006d96:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f103 0208 	add.w	r2, r3, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f103 0208 	add.w	r2, r3, #8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f103 0208 	add.w	r2, r3, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	601a      	str	r2, [r3, #0]
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d103      	bne.n	8006e62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e00c      	b.n	8006e7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3308      	adds	r3, #8
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e002      	b.n	8006e70 <vListInsert+0x2e>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d2f6      	bcs.n	8006e6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6892      	ldr	r2, [r2, #8]
 8006eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6852      	ldr	r2, [r2, #4]
 8006ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d103      	bne.n	8006ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	1e5a      	subs	r2, r3, #1
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08e      	sub	sp, #56	; 0x38
 8006f0c:	af04      	add	r7, sp, #16
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xTaskCreateStatic+0x46>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	61fb      	str	r3, [r7, #28]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f4e:	2354      	movs	r3, #84	; 0x54
 8006f50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b54      	cmp	r3, #84	; 0x54
 8006f56:	d00a      	beq.n	8006f6e <xTaskCreateStatic+0x66>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61bb      	str	r3, [r7, #24]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01e      	beq.n	8006fb4 <xTaskCreateStatic+0xac>
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01b      	beq.n	8006fb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	9302      	str	r3, [sp, #8]
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f850 	bl	800704c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fae:	f000 f8d5 	bl	800715c <prvAddNewTaskToReadyList>
 8006fb2:	e001      	b.n	8006fb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fb8:	697b      	ldr	r3, [r7, #20]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3728      	adds	r7, #40	; 0x28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b08c      	sub	sp, #48	; 0x30
 8006fc6:	af04      	add	r7, sp, #16
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f926 	bl	8008228 <pvPortMalloc>
 8006fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fe4:	2054      	movs	r0, #84	; 0x54
 8006fe6:	f001 f91f 	bl	8008228 <pvPortMalloc>
 8006fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ff8:	e005      	b.n	8007006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ffa:	6978      	ldr	r0, [r7, #20]
 8006ffc:	f001 f9e0 	bl	80083c0 <vPortFree>
 8007000:	e001      	b.n	8007006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d017      	beq.n	800703c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	2300      	movs	r3, #0
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	9302      	str	r3, [sp, #8]
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	9301      	str	r3, [sp, #4]
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f80e 	bl	800704c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007030:	69f8      	ldr	r0, [r7, #28]
 8007032:	f000 f893 	bl	800715c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007036:	2301      	movs	r3, #1
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	e002      	b.n	8007042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800703c:	f04f 33ff 	mov.w	r3, #4294967295
 8007040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007042:	69bb      	ldr	r3, [r7, #24]
	}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007064:	3b01      	subs	r3, #1
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f023 0307 	bic.w	r3, r3, #7
 8007072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <prvInitialiseNewTask+0x48>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	617b      	str	r3, [r7, #20]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01f      	beq.n	80070da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	e012      	b.n	80070c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	7819      	ldrb	r1, [r3, #0]
 80070a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	3334      	adds	r3, #52	; 0x34
 80070b0:	460a      	mov	r2, r1
 80070b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	2b0f      	cmp	r3, #15
 80070ca:	d9e9      	bls.n	80070a0 <prvInitialiseNewTask+0x54>
 80070cc:	e000      	b.n	80070d0 <prvInitialiseNewTask+0x84>
			{
				break;
 80070ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070d8:	e003      	b.n	80070e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	2b06      	cmp	r3, #6
 80070e6:	d901      	bls.n	80070ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070e8:	2306      	movs	r3, #6
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	2200      	movs	r2, #0
 80070fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fe6c 	bl	8006de0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	3318      	adds	r3, #24
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff fe67 	bl	8006de0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	f1c3 0207 	rsb	r2, r3, #7
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	2200      	movs	r2, #0
 800712c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	69b8      	ldr	r0, [r7, #24]
 800713c:	f000 fe28 	bl	8007d90 <pxPortInitialiseStack>
 8007140:	4602      	mov	r2, r0
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007152:	bf00      	nop
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007164:	f000 ff3e 	bl	8007fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007168:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <prvAddNewTaskToReadyList+0xb8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a29      	ldr	r2, [pc, #164]	; (8007214 <prvAddNewTaskToReadyList+0xb8>)
 8007170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007172:	4b29      	ldr	r3, [pc, #164]	; (8007218 <prvAddNewTaskToReadyList+0xbc>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800717a:	4a27      	ldr	r2, [pc, #156]	; (8007218 <prvAddNewTaskToReadyList+0xbc>)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007180:	4b24      	ldr	r3, [pc, #144]	; (8007214 <prvAddNewTaskToReadyList+0xb8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d110      	bne.n	80071aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007188:	f000 fcde 	bl	8007b48 <prvInitialiseTaskLists>
 800718c:	e00d      	b.n	80071aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800718e:	4b23      	ldr	r3, [pc, #140]	; (800721c <prvAddNewTaskToReadyList+0xc0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007196:	4b20      	ldr	r3, [pc, #128]	; (8007218 <prvAddNewTaskToReadyList+0xbc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d802      	bhi.n	80071aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071a4:	4a1c      	ldr	r2, [pc, #112]	; (8007218 <prvAddNewTaskToReadyList+0xbc>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071aa:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <prvAddNewTaskToReadyList+0xc4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	4a1b      	ldr	r2, [pc, #108]	; (8007220 <prvAddNewTaskToReadyList+0xc4>)
 80071b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2201      	movs	r2, #1
 80071ba:	409a      	lsls	r2, r3
 80071bc:	4b19      	ldr	r3, [pc, #100]	; (8007224 <prvAddNewTaskToReadyList+0xc8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	4a18      	ldr	r2, [pc, #96]	; (8007224 <prvAddNewTaskToReadyList+0xc8>)
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <prvAddNewTaskToReadyList+0xcc>)
 80071d4:	441a      	add	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3304      	adds	r3, #4
 80071da:	4619      	mov	r1, r3
 80071dc:	4610      	mov	r0, r2
 80071de:	f7ff fe0c 	bl	8006dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071e2:	f000 ff2f 	bl	8008044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071e6:	4b0d      	ldr	r3, [pc, #52]	; (800721c <prvAddNewTaskToReadyList+0xc0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00e      	beq.n	800720c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071ee:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <prvAddNewTaskToReadyList+0xbc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d207      	bcs.n	800720c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <prvAddNewTaskToReadyList+0xd0>)
 80071fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	200003c0 	.word	0x200003c0
 8007218:	200002c0 	.word	0x200002c0
 800721c:	200003cc 	.word	0x200003cc
 8007220:	200003dc 	.word	0x200003dc
 8007224:	200003c8 	.word	0x200003c8
 8007228:	200002c4 	.word	0x200002c4
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <vTaskDelayUntil+0x2a>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	617b      	str	r3, [r7, #20]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <vTaskDelayUntil+0x46>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	613b      	str	r3, [r7, #16]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007276:	4b2a      	ldr	r3, [pc, #168]	; (8007320 <vTaskDelayUntil+0xf0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <vTaskDelayUntil+0x64>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007294:	f000 fa72 	bl	800777c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007298:	4b22      	ldr	r3, [pc, #136]	; (8007324 <vTaskDelayUntil+0xf4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4413      	add	r3, r2
 80072a6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6a3a      	ldr	r2, [r7, #32]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d20b      	bcs.n	80072ca <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d211      	bcs.n	80072e0 <vTaskDelayUntil+0xb0>
 80072bc:	69fa      	ldr	r2, [r7, #28]
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d90d      	bls.n	80072e0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
 80072c8:	e00a      	b.n	80072e0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d303      	bcc.n	80072dc <vTaskDelayUntil+0xac>
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d901      	bls.n	80072e0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fce5 	bl	8007cc4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80072fa:	f000 fa4d 	bl	8007798 <xTaskResumeAll>
 80072fe:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d107      	bne.n	8007316 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007306:	4b08      	ldr	r3, [pc, #32]	; (8007328 <vTaskDelayUntil+0xf8>)
 8007308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007316:	bf00      	nop
 8007318:	3728      	adds	r7, #40	; 0x28
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200003e8 	.word	0x200003e8
 8007324:	200003c4 	.word	0x200003c4
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d017      	beq.n	800736e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <vTaskDelay+0x60>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <vTaskDelay+0x30>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60bb      	str	r3, [r7, #8]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800735c:	f000 fa0e 	bl	800777c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007360:	2100      	movs	r1, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fcae 	bl	8007cc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007368:	f000 fa16 	bl	8007798 <xTaskResumeAll>
 800736c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d107      	bne.n	8007384 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <vTaskDelay+0x64>)
 8007376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	200003e8 	.word	0x200003e8
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800739c:	f000 fe22 	bl	8007fe4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d102      	bne.n	80073ac <vTaskSuspend+0x18>
 80073a6:	4b3c      	ldr	r3, [pc, #240]	; (8007498 <vTaskSuspend+0x104>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	e000      	b.n	80073ae <vTaskSuspend+0x1a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fd7d 	bl	8006eb4 <uxListRemove>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d115      	bne.n	80073ec <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c4:	4935      	ldr	r1, [pc, #212]	; (800749c <vTaskSuspend+0x108>)
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <vTaskSuspend+0x58>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	2201      	movs	r2, #1
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	43da      	mvns	r2, r3
 80073e2:	4b2f      	ldr	r3, [pc, #188]	; (80074a0 <vTaskSuspend+0x10c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4013      	ands	r3, r2
 80073e8:	4a2d      	ldr	r2, [pc, #180]	; (80074a0 <vTaskSuspend+0x10c>)
 80073ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3318      	adds	r3, #24
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fd5b 	bl	8006eb4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3304      	adds	r3, #4
 8007402:	4619      	mov	r1, r3
 8007404:	4827      	ldr	r0, [pc, #156]	; (80074a4 <vTaskSuspend+0x110>)
 8007406:	f7ff fcf8 	bl	8006dfa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b01      	cmp	r3, #1
 8007414:	d103      	bne.n	800741e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800741e:	f000 fe11 	bl	8008044 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007422:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <vTaskSuspend+0x114>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800742a:	f000 fddb 	bl	8007fe4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800742e:	f000 fc29 	bl	8007c84 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007432:	f000 fe07 	bl	8008044 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007436:	4b18      	ldr	r3, [pc, #96]	; (8007498 <vTaskSuspend+0x104>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d127      	bne.n	8007490 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <vTaskSuspend+0x114>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d017      	beq.n	8007478 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007448:	4b18      	ldr	r3, [pc, #96]	; (80074ac <vTaskSuspend+0x118>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <vTaskSuspend+0xd2>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60bb      	str	r3, [r7, #8]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <vTaskSuspend+0x11c>)
 8007468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007476:	e00b      	b.n	8007490 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <vTaskSuspend+0x110>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <vTaskSuspend+0x120>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d103      	bne.n	800748c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <vTaskSuspend+0x104>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
	}
 800748a:	e001      	b.n	8007490 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800748c:	f000 fae8 	bl	8007a60 <vTaskSwitchContext>
	}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	200002c0 	.word	0x200002c0
 800749c:	200002c4 	.word	0x200002c4
 80074a0:	200003c8 	.word	0x200003c8
 80074a4:	200003ac 	.word	0x200003ac
 80074a8:	200003cc 	.word	0x200003cc
 80074ac:	200003e8 	.word	0x200003e8
 80074b0:	e000ed04 	.word	0xe000ed04
 80074b4:	200003c0 	.word	0x200003c0

080074b8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60fb      	str	r3, [r7, #12]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	4a0a      	ldr	r2, [pc, #40]	; (8007514 <prvTaskIsTaskSuspended+0x5c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d10a      	bne.n	8007504 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	4a09      	ldr	r2, [pc, #36]	; (8007518 <prvTaskIsTaskSuspended+0x60>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d005      	beq.n	8007504 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007504:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007506:	4618      	mov	r0, r3
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	200003ac 	.word	0x200003ac
 8007518:	20000380 	.word	0x20000380

0800751c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <vTaskResume+0x28>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	60bb      	str	r3, [r7, #8]
}
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007544:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <vTaskResume+0xac>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	429a      	cmp	r2, r3
 800754c:	d037      	beq.n	80075be <vTaskResume+0xa2>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d034      	beq.n	80075be <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007554:	f000 fd46 	bl	8007fe4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff ffad 	bl	80074b8 <prvTaskIsTaskSuspended>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02a      	beq.n	80075ba <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fca3 	bl	8006eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	2201      	movs	r2, #1
 8007574:	409a      	lsls	r2, r3
 8007576:	4b15      	ldr	r3, [pc, #84]	; (80075cc <vTaskResume+0xb0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4313      	orrs	r3, r2
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <vTaskResume+0xb0>)
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <vTaskResume+0xb4>)
 800758e:	441a      	add	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3304      	adds	r3, #4
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f7ff fc2f 	bl	8006dfa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <vTaskResume+0xac>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d307      	bcc.n	80075ba <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80075aa:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <vTaskResume+0xb8>)
 80075ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80075ba:	f000 fd43 	bl	8008044 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	200002c0 	.word	0x200002c0
 80075cc:	200003c8 	.word	0x200003c8
 80075d0:	200002c4 	.word	0x200002c4
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	61bb      	str	r3, [r7, #24]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007604:	f000 fdd0 	bl	80081a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007608:	f3ef 8211 	mrs	r2, BASEPRI
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	617a      	str	r2, [r7, #20]
 800761e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007620:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007622:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007624:	6a38      	ldr	r0, [r7, #32]
 8007626:	f7ff ff47 	bl	80074b8 <prvTaskIsTaskSuspended>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d02f      	beq.n	8007690 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <xTaskResumeFromISR+0xd0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d125      	bne.n	8007684 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <xTaskResumeFromISR+0xd4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	429a      	cmp	r2, r3
 8007644:	d301      	bcc.n	800764a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8007646:	2301      	movs	r3, #1
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	3304      	adds	r3, #4
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff fc30 	bl	8006eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	2201      	movs	r2, #1
 800765a:	409a      	lsls	r2, r3
 800765c:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <xTaskResumeFromISR+0xd8>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4313      	orrs	r3, r2
 8007662:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <xTaskResumeFromISR+0xd8>)
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4a10      	ldr	r2, [pc, #64]	; (80076b4 <xTaskResumeFromISR+0xdc>)
 8007674:	441a      	add	r2, r3
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	3304      	adds	r3, #4
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7ff fbbc 	bl	8006dfa <vListInsertEnd>
 8007682:	e005      	b.n	8007690 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	3318      	adds	r3, #24
 8007688:	4619      	mov	r1, r3
 800768a:	480b      	ldr	r0, [pc, #44]	; (80076b8 <xTaskResumeFromISR+0xe0>)
 800768c:	f7ff fbb5 	bl	8006dfa <vListInsertEnd>
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800769a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800769e:	4618      	mov	r0, r3
 80076a0:	3728      	adds	r7, #40	; 0x28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200003e8 	.word	0x200003e8
 80076ac:	200002c0 	.word	0x200002c0
 80076b0:	200003c8 	.word	0x200003c8
 80076b4:	200002c4 	.word	0x200002c4
 80076b8:	20000380 	.word	0x20000380

080076bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	; 0x28
 80076c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ca:	463a      	mov	r2, r7
 80076cc:	1d39      	adds	r1, r7, #4
 80076ce:	f107 0308 	add.w	r3, r7, #8
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7f9 fdce 	bl	8001274 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	9202      	str	r2, [sp, #8]
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	2300      	movs	r3, #0
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	2300      	movs	r3, #0
 80076e8:	460a      	mov	r2, r1
 80076ea:	491e      	ldr	r1, [pc, #120]	; (8007764 <vTaskStartScheduler+0xa8>)
 80076ec:	481e      	ldr	r0, [pc, #120]	; (8007768 <vTaskStartScheduler+0xac>)
 80076ee:	f7ff fc0b 	bl	8006f08 <xTaskCreateStatic>
 80076f2:	4603      	mov	r3, r0
 80076f4:	4a1d      	ldr	r2, [pc, #116]	; (800776c <vTaskStartScheduler+0xb0>)
 80076f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076f8:	4b1c      	ldr	r3, [pc, #112]	; (800776c <vTaskStartScheduler+0xb0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007700:	2301      	movs	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e001      	b.n	800770a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d116      	bne.n	800773e <vTaskStartScheduler+0x82>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	613b      	str	r3, [r7, #16]
}
 8007722:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007724:	4b12      	ldr	r3, [pc, #72]	; (8007770 <vTaskStartScheduler+0xb4>)
 8007726:	f04f 32ff 	mov.w	r2, #4294967295
 800772a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800772c:	4b11      	ldr	r3, [pc, #68]	; (8007774 <vTaskStartScheduler+0xb8>)
 800772e:	2201      	movs	r2, #1
 8007730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007732:	4b11      	ldr	r3, [pc, #68]	; (8007778 <vTaskStartScheduler+0xbc>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007738:	f000 fbb2 	bl	8007ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800773c:	e00e      	b.n	800775c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d10a      	bne.n	800775c <vTaskStartScheduler+0xa0>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	60fb      	str	r3, [r7, #12]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <vTaskStartScheduler+0x9e>
}
 800775c:	bf00      	nop
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	080087c4 	.word	0x080087c4
 8007768:	08007b19 	.word	0x08007b19
 800776c:	200003e4 	.word	0x200003e4
 8007770:	200003e0 	.word	0x200003e0
 8007774:	200003cc 	.word	0x200003cc
 8007778:	200003c4 	.word	0x200003c4

0800777c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <vTaskSuspendAll+0x18>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a03      	ldr	r2, [pc, #12]	; (8007794 <vTaskSuspendAll+0x18>)
 8007788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	200003e8 	.word	0x200003e8

08007798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077a6:	4b41      	ldr	r3, [pc, #260]	; (80078ac <xTaskResumeAll+0x114>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	603b      	str	r3, [r7, #0]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077c4:	f000 fc0e 	bl	8007fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077c8:	4b38      	ldr	r3, [pc, #224]	; (80078ac <xTaskResumeAll+0x114>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	4a37      	ldr	r2, [pc, #220]	; (80078ac <xTaskResumeAll+0x114>)
 80077d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d2:	4b36      	ldr	r3, [pc, #216]	; (80078ac <xTaskResumeAll+0x114>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d161      	bne.n	800789e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077da:	4b35      	ldr	r3, [pc, #212]	; (80078b0 <xTaskResumeAll+0x118>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d05d      	beq.n	800789e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e2:	e02e      	b.n	8007842 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e4:	4b33      	ldr	r3, [pc, #204]	; (80078b4 <xTaskResumeAll+0x11c>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3318      	adds	r3, #24
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fb5f 	bl	8006eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fb5a 	bl	8006eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	2201      	movs	r2, #1
 8007806:	409a      	lsls	r2, r3
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <xTaskResumeAll+0x120>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4313      	orrs	r3, r2
 800780e:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <xTaskResumeAll+0x120>)
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4a27      	ldr	r2, [pc, #156]	; (80078bc <xTaskResumeAll+0x124>)
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3304      	adds	r3, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f7ff fae6 	bl	8006dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <xTaskResumeAll+0x128>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	429a      	cmp	r2, r3
 800783a:	d302      	bcc.n	8007842 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800783c:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <xTaskResumeAll+0x12c>)
 800783e:	2201      	movs	r2, #1
 8007840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <xTaskResumeAll+0x11c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1cc      	bne.n	80077e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007850:	f000 fa18 	bl	8007c84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007854:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <xTaskResumeAll+0x130>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d010      	beq.n	8007882 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007860:	f000 f846 	bl	80078f0 <xTaskIncrementTick>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800786a:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <xTaskResumeAll+0x12c>)
 800786c:	2201      	movs	r2, #1
 800786e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3b01      	subs	r3, #1
 8007874:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f1      	bne.n	8007860 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800787c:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <xTaskResumeAll+0x130>)
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007882:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <xTaskResumeAll+0x12c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <xTaskResumeAll+0x134>)
 8007890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800789e:	f000 fbd1 	bl	8008044 <vPortExitCritical>

	return xAlreadyYielded;
 80078a2:	68bb      	ldr	r3, [r7, #8]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	200003e8 	.word	0x200003e8
 80078b0:	200003c0 	.word	0x200003c0
 80078b4:	20000380 	.word	0x20000380
 80078b8:	200003c8 	.word	0x200003c8
 80078bc:	200002c4 	.word	0x200002c4
 80078c0:	200002c0 	.word	0x200002c0
 80078c4:	200003d4 	.word	0x200003d4
 80078c8:	200003d0 	.word	0x200003d0
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078d6:	4b05      	ldr	r3, [pc, #20]	; (80078ec <xTaskGetTickCount+0x1c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078dc:	687b      	ldr	r3, [r7, #4]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	200003c4 	.word	0x200003c4

080078f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fa:	4b4e      	ldr	r3, [pc, #312]	; (8007a34 <xTaskIncrementTick+0x144>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 808e 	bne.w	8007a20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007904:	4b4c      	ldr	r3, [pc, #304]	; (8007a38 <xTaskIncrementTick+0x148>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800790c:	4a4a      	ldr	r2, [pc, #296]	; (8007a38 <xTaskIncrementTick+0x148>)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d120      	bne.n	800795a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007918:	4b48      	ldr	r3, [pc, #288]	; (8007a3c <xTaskIncrementTick+0x14c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <xTaskIncrementTick+0x48>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	603b      	str	r3, [r7, #0]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <xTaskIncrementTick+0x46>
 8007938:	4b40      	ldr	r3, [pc, #256]	; (8007a3c <xTaskIncrementTick+0x14c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	4b40      	ldr	r3, [pc, #256]	; (8007a40 <xTaskIncrementTick+0x150>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a3e      	ldr	r2, [pc, #248]	; (8007a3c <xTaskIncrementTick+0x14c>)
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	4a3e      	ldr	r2, [pc, #248]	; (8007a40 <xTaskIncrementTick+0x150>)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	4b3d      	ldr	r3, [pc, #244]	; (8007a44 <xTaskIncrementTick+0x154>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	4a3c      	ldr	r2, [pc, #240]	; (8007a44 <xTaskIncrementTick+0x154>)
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	f000 f995 	bl	8007c84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800795a:	4b3b      	ldr	r3, [pc, #236]	; (8007a48 <xTaskIncrementTick+0x158>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	429a      	cmp	r2, r3
 8007962:	d348      	bcc.n	80079f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007964:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <xTaskIncrementTick+0x14c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <xTaskIncrementTick+0x158>)
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	601a      	str	r2, [r3, #0]
					break;
 8007976:	e03e      	b.n	80079f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007978:	4b30      	ldr	r3, [pc, #192]	; (8007a3c <xTaskIncrementTick+0x14c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d203      	bcs.n	8007998 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007990:	4a2d      	ldr	r2, [pc, #180]	; (8007a48 <xTaskIncrementTick+0x158>)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007996:	e02e      	b.n	80079f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3304      	adds	r3, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fa89 	bl	8006eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3318      	adds	r3, #24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff fa80 	bl	8006eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	2201      	movs	r2, #1
 80079ba:	409a      	lsls	r2, r3
 80079bc:	4b23      	ldr	r3, [pc, #140]	; (8007a4c <xTaskIncrementTick+0x15c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	4a22      	ldr	r2, [pc, #136]	; (8007a4c <xTaskIncrementTick+0x15c>)
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <xTaskIncrementTick+0x160>)
 80079d4:	441a      	add	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7ff fa0c 	bl	8006dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <xTaskIncrementTick+0x164>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d3b9      	bcc.n	8007964 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f4:	e7b6      	b.n	8007964 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079f6:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <xTaskIncrementTick+0x164>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	4914      	ldr	r1, [pc, #80]	; (8007a50 <xTaskIncrementTick+0x160>)
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d901      	bls.n	8007a12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a12:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <xTaskIncrementTick+0x168>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d007      	beq.n	8007a2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e004      	b.n	8007a2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a20:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <xTaskIncrementTick+0x16c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3301      	adds	r3, #1
 8007a26:	4a0d      	ldr	r2, [pc, #52]	; (8007a5c <xTaskIncrementTick+0x16c>)
 8007a28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a2a:	697b      	ldr	r3, [r7, #20]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	200003e8 	.word	0x200003e8
 8007a38:	200003c4 	.word	0x200003c4
 8007a3c:	20000378 	.word	0x20000378
 8007a40:	2000037c 	.word	0x2000037c
 8007a44:	200003d8 	.word	0x200003d8
 8007a48:	200003e0 	.word	0x200003e0
 8007a4c:	200003c8 	.word	0x200003c8
 8007a50:	200002c4 	.word	0x200002c4
 8007a54:	200002c0 	.word	0x200002c0
 8007a58:	200003d4 	.word	0x200003d4
 8007a5c:	200003d0 	.word	0x200003d0

08007a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a66:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <vTaskSwitchContext+0xa4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a6e:	4b26      	ldr	r3, [pc, #152]	; (8007b08 <vTaskSwitchContext+0xa8>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a74:	e03f      	b.n	8007af6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007a76:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <vTaskSwitchContext+0xa8>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7c:	4b23      	ldr	r3, [pc, #140]	; (8007b0c <vTaskSwitchContext+0xac>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	fab3 f383 	clz	r3, r3
 8007a88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	f1c3 031f 	rsb	r3, r3, #31
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	491f      	ldr	r1, [pc, #124]	; (8007b10 <vTaskSwitchContext+0xb0>)
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <vTaskSwitchContext+0x5c>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	607b      	str	r3, [r7, #4]
}
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <vTaskSwitchContext+0x5a>
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4a12      	ldr	r2, [pc, #72]	; (8007b10 <vTaskSwitchContext+0xb0>)
 8007ac8:	4413      	add	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3308      	adds	r3, #8
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d104      	bne.n	8007aec <vTaskSwitchContext+0x8c>
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <vTaskSwitchContext+0xb4>)
 8007af4:	6013      	str	r3, [r2, #0]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	200003e8 	.word	0x200003e8
 8007b08:	200003d4 	.word	0x200003d4
 8007b0c:	200003c8 	.word	0x200003c8
 8007b10:	200002c4 	.word	0x200002c4
 8007b14:	200002c0 	.word	0x200002c0

08007b18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b20:	f000 f852 	bl	8007bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <prvIdleTask+0x28>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d9f9      	bls.n	8007b20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <prvIdleTask+0x2c>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b3c:	e7f0      	b.n	8007b20 <prvIdleTask+0x8>
 8007b3e:	bf00      	nop
 8007b40:	200002c4 	.word	0x200002c4
 8007b44:	e000ed04 	.word	0xe000ed04

08007b48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]
 8007b52:	e00c      	b.n	8007b6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4a12      	ldr	r2, [pc, #72]	; (8007ba8 <prvInitialiseTaskLists+0x60>)
 8007b60:	4413      	add	r3, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff f91c 	bl	8006da0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b06      	cmp	r3, #6
 8007b72:	d9ef      	bls.n	8007b54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b74:	480d      	ldr	r0, [pc, #52]	; (8007bac <prvInitialiseTaskLists+0x64>)
 8007b76:	f7ff f913 	bl	8006da0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b7a:	480d      	ldr	r0, [pc, #52]	; (8007bb0 <prvInitialiseTaskLists+0x68>)
 8007b7c:	f7ff f910 	bl	8006da0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b80:	480c      	ldr	r0, [pc, #48]	; (8007bb4 <prvInitialiseTaskLists+0x6c>)
 8007b82:	f7ff f90d 	bl	8006da0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b86:	480c      	ldr	r0, [pc, #48]	; (8007bb8 <prvInitialiseTaskLists+0x70>)
 8007b88:	f7ff f90a 	bl	8006da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b8c:	480b      	ldr	r0, [pc, #44]	; (8007bbc <prvInitialiseTaskLists+0x74>)
 8007b8e:	f7ff f907 	bl	8006da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <prvInitialiseTaskLists+0x78>)
 8007b94:	4a05      	ldr	r2, [pc, #20]	; (8007bac <prvInitialiseTaskLists+0x64>)
 8007b96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <prvInitialiseTaskLists+0x7c>)
 8007b9a:	4a05      	ldr	r2, [pc, #20]	; (8007bb0 <prvInitialiseTaskLists+0x68>)
 8007b9c:	601a      	str	r2, [r3, #0]
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200002c4 	.word	0x200002c4
 8007bac:	20000350 	.word	0x20000350
 8007bb0:	20000364 	.word	0x20000364
 8007bb4:	20000380 	.word	0x20000380
 8007bb8:	20000394 	.word	0x20000394
 8007bbc:	200003ac 	.word	0x200003ac
 8007bc0:	20000378 	.word	0x20000378
 8007bc4:	2000037c 	.word	0x2000037c

08007bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bce:	e019      	b.n	8007c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bd0:	f000 fa08 	bl	8007fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd4:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <prvCheckTasksWaitingTermination+0x50>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff f967 	bl	8006eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <prvCheckTasksWaitingTermination+0x54>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	4a0b      	ldr	r2, [pc, #44]	; (8007c1c <prvCheckTasksWaitingTermination+0x54>)
 8007bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <prvCheckTasksWaitingTermination+0x58>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <prvCheckTasksWaitingTermination+0x58>)
 8007bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bfa:	f000 fa23 	bl	8008044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f810 	bl	8007c24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <prvCheckTasksWaitingTermination+0x58>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e1      	bne.n	8007bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000394 	.word	0x20000394
 8007c1c:	200003c0 	.word	0x200003c0
 8007c20:	200003a8 	.word	0x200003a8

08007c24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d108      	bne.n	8007c48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fbc0 	bl	80083c0 <vPortFree>
				vPortFree( pxTCB );
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fbbd 	bl	80083c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c46:	e018      	b.n	8007c7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d103      	bne.n	8007c5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fbb4 	bl	80083c0 <vPortFree>
	}
 8007c58:	e00f      	b.n	8007c7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d00a      	beq.n	8007c7a <prvDeleteTCB+0x56>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	60fb      	str	r3, [r7, #12]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <prvDeleteTCB+0x54>
	}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <prvResetNextTaskUnblockTime+0x38>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c9c:	e008      	b.n	8007cb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <prvResetNextTaskUnblockTime+0x38>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4a04      	ldr	r2, [pc, #16]	; (8007cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8007cae:	6013      	str	r3, [r2, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20000378 	.word	0x20000378
 8007cc0:	200003e0 	.word	0x200003e0

08007cc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cce:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd4:	4b28      	ldr	r3, [pc, #160]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff f8ea 	bl	8006eb4 <uxListRemove>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ce6:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	2201      	movs	r2, #1
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	4a20      	ldr	r2, [pc, #128]	; (8007d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d10a      	bne.n	8007d1c <prvAddCurrentTaskToDelayedList+0x58>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4619      	mov	r1, r3
 8007d14:	481a      	ldr	r0, [pc, #104]	; (8007d80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d16:	f7ff f870 	bl	8006dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d1a:	e026      	b.n	8007d6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d24:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d209      	bcs.n	8007d48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d34:	4b13      	ldr	r3, [pc, #76]	; (8007d84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7ff f87e 	bl	8006e42 <vListInsert>
}
 8007d46:	e010      	b.n	8007d6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d48:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7ff f874 	bl	8006e42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d202      	bcs.n	8007d6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d64:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6013      	str	r3, [r2, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	200003c4 	.word	0x200003c4
 8007d78:	200002c0 	.word	0x200002c0
 8007d7c:	200003c8 	.word	0x200003c8
 8007d80:	200003ac 	.word	0x200003ac
 8007d84:	2000037c 	.word	0x2000037c
 8007d88:	20000378 	.word	0x20000378
 8007d8c:	200003e0 	.word	0x200003e0

08007d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3b04      	subs	r3, #4
 8007da0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dc0:	4a0c      	ldr	r2, [pc, #48]	; (8007df4 <pxPortInitialiseStack+0x64>)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3b14      	subs	r3, #20
 8007dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3b04      	subs	r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f06f 0202 	mvn.w	r2, #2
 8007dde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3b20      	subs	r3, #32
 8007de4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	08007df9 	.word	0x08007df9

08007df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e02:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <prvTaskExitError+0x54>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d00a      	beq.n	8007e22 <prvTaskExitError+0x2a>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <prvTaskExitError+0x28>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	60bb      	str	r3, [r7, #8]
}
 8007e34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e36:	bf00      	nop
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0fc      	beq.n	8007e38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	2000000c 	.word	0x2000000c

08007e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <pxCurrentTCBConst2>)
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	6808      	ldr	r0, [r1, #0]
 8007e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	f380 8809 	msr	PSP, r0
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f380 8811 	msr	BASEPRI, r0
 8007e6a:	4770      	bx	lr
 8007e6c:	f3af 8000 	nop.w

08007e70 <pxCurrentTCBConst2>:
 8007e70:	200002c0 	.word	0x200002c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop

08007e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e78:	4808      	ldr	r0, [pc, #32]	; (8007e9c <prvPortStartFirstTask+0x24>)
 8007e7a:	6800      	ldr	r0, [r0, #0]
 8007e7c:	6800      	ldr	r0, [r0, #0]
 8007e7e:	f380 8808 	msr	MSP, r0
 8007e82:	f04f 0000 	mov.w	r0, #0
 8007e86:	f380 8814 	msr	CONTROL, r0
 8007e8a:	b662      	cpsie	i
 8007e8c:	b661      	cpsie	f
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	df00      	svc	0
 8007e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e9a:	bf00      	nop
 8007e9c:	e000ed08 	.word	0xe000ed08

08007ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ea6:	4b46      	ldr	r3, [pc, #280]	; (8007fc0 <xPortStartScheduler+0x120>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a46      	ldr	r2, [pc, #280]	; (8007fc4 <xPortStartScheduler+0x124>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10a      	bne.n	8007ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	613b      	str	r3, [r7, #16]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	; (8007fc0 <xPortStartScheduler+0x120>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a3f      	ldr	r2, [pc, #252]	; (8007fc8 <xPortStartScheduler+0x128>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d10a      	bne.n	8007ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60fb      	str	r3, [r7, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ee6:	4b39      	ldr	r3, [pc, #228]	; (8007fcc <xPortStartScheduler+0x12c>)
 8007ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	22ff      	movs	r2, #255	; 0xff
 8007ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <xPortStartScheduler+0x130>)
 8007f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f0e:	4b31      	ldr	r3, [pc, #196]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f14:	e009      	b.n	8007f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f16:	4b2f      	ldr	r3, [pc, #188]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	4a2d      	ldr	r2, [pc, #180]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f32:	2b80      	cmp	r3, #128	; 0x80
 8007f34:	d0ef      	beq.n	8007f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f36:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f1c3 0307 	rsb	r3, r3, #7
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d00a      	beq.n	8007f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60bb      	str	r3, [r7, #8]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f58:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f6a:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f76:	4b18      	ldr	r3, [pc, #96]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a14      	ldr	r2, [pc, #80]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f8e:	f000 f8dd 	bl	800814c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f92:	4b12      	ldr	r3, [pc, #72]	; (8007fdc <xPortStartScheduler+0x13c>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f98:	f000 f8fc 	bl	8008194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <xPortStartScheduler+0x140>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a0f      	ldr	r2, [pc, #60]	; (8007fe0 <xPortStartScheduler+0x140>)
 8007fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fa8:	f7ff ff66 	bl	8007e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fac:	f7ff fd58 	bl	8007a60 <vTaskSwitchContext>
	prvTaskExitError();
 8007fb0:	f7ff ff22 	bl	8007df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	e000ed00 	.word	0xe000ed00
 8007fc4:	410fc271 	.word	0x410fc271
 8007fc8:	410fc270 	.word	0x410fc270
 8007fcc:	e000e400 	.word	0xe000e400
 8007fd0:	200003ec 	.word	0x200003ec
 8007fd4:	200003f0 	.word	0x200003f0
 8007fd8:	e000ed20 	.word	0xe000ed20
 8007fdc:	2000000c 	.word	0x2000000c
 8007fe0:	e000ef34 	.word	0xe000ef34

08007fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	607b      	str	r3, [r7, #4]
}
 8007ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ffe:	4b0f      	ldr	r3, [pc, #60]	; (800803c <vPortEnterCritical+0x58>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3301      	adds	r3, #1
 8008004:	4a0d      	ldr	r2, [pc, #52]	; (800803c <vPortEnterCritical+0x58>)
 8008006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <vPortEnterCritical+0x58>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10f      	bne.n	8008030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008010:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <vPortEnterCritical+0x5c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <vPortEnterCritical+0x4c>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	603b      	str	r3, [r7, #0]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <vPortEnterCritical+0x4a>
	}
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	2000000c 	.word	0x2000000c
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800804a:	4b12      	ldr	r3, [pc, #72]	; (8008094 <vPortExitCritical+0x50>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <vPortExitCritical+0x24>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	607b      	str	r3, [r7, #4]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <vPortExitCritical+0x50>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3b01      	subs	r3, #1
 800806e:	4a09      	ldr	r2, [pc, #36]	; (8008094 <vPortExitCritical+0x50>)
 8008070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008072:	4b08      	ldr	r3, [pc, #32]	; (8008094 <vPortExitCritical+0x50>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <vPortExitCritical+0x42>
 800807a:	2300      	movs	r3, #0
 800807c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	f383 8811 	msr	BASEPRI, r3
}
 8008084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2000000c 	.word	0x2000000c
	...

080080a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080a0:	f3ef 8009 	mrs	r0, PSP
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <pxCurrentTCBConst>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	f01e 0f10 	tst.w	lr, #16
 80080b0:	bf08      	it	eq
 80080b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	6010      	str	r0, [r2, #0]
 80080bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080c4:	f380 8811 	msr	BASEPRI, r0
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f7ff fcc6 	bl	8007a60 <vTaskSwitchContext>
 80080d4:	f04f 0000 	mov.w	r0, #0
 80080d8:	f380 8811 	msr	BASEPRI, r0
 80080dc:	bc09      	pop	{r0, r3}
 80080de:	6819      	ldr	r1, [r3, #0]
 80080e0:	6808      	ldr	r0, [r1, #0]
 80080e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e6:	f01e 0f10 	tst.w	lr, #16
 80080ea:	bf08      	it	eq
 80080ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080f0:	f380 8809 	msr	PSP, r0
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w

08008100 <pxCurrentTCBConst>:
 8008100:	200002c0 	.word	0x200002c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop

08008108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008122:	f7ff fbe5 	bl	80078f0 <xTaskIncrementTick>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <SysTick_Handler+0x40>)
 800812e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	2300      	movs	r3, #0
 8008136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f383 8811 	msr	BASEPRI, r3
}
 800813e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <vPortSetupTimerInterrupt+0x34>)
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <vPortSetupTimerInterrupt+0x38>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <vPortSetupTimerInterrupt+0x3c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0a      	ldr	r2, [pc, #40]	; (800818c <vPortSetupTimerInterrupt+0x40>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	099b      	lsrs	r3, r3, #6
 8008168:	4a09      	ldr	r2, [pc, #36]	; (8008190 <vPortSetupTimerInterrupt+0x44>)
 800816a:	3b01      	subs	r3, #1
 800816c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800816e:	4b04      	ldr	r3, [pc, #16]	; (8008180 <vPortSetupTimerInterrupt+0x34>)
 8008170:	2207      	movs	r2, #7
 8008172:	601a      	str	r2, [r3, #0]
}
 8008174:	bf00      	nop
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	e000e010 	.word	0xe000e010
 8008184:	e000e018 	.word	0xe000e018
 8008188:	20000000 	.word	0x20000000
 800818c:	10624dd3 	.word	0x10624dd3
 8008190:	e000e014 	.word	0xe000e014

08008194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081a4 <vPortEnableVFP+0x10>
 8008198:	6801      	ldr	r1, [r0, #0]
 800819a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800819e:	6001      	str	r1, [r0, #0]
 80081a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081a2:	bf00      	nop
 80081a4:	e000ed88 	.word	0xe000ed88

080081a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081ae:	f3ef 8305 	mrs	r3, IPSR
 80081b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d914      	bls.n	80081e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <vPortValidateInterruptPriority+0x70>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081c4:	4b15      	ldr	r3, [pc, #84]	; (800821c <vPortValidateInterruptPriority+0x74>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	7afa      	ldrb	r2, [r7, #11]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d20a      	bcs.n	80081e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <vPortValidateInterruptPriority+0x78>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081ec:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <vPortValidateInterruptPriority+0x7c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d90a      	bls.n	800820a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	603b      	str	r3, [r7, #0]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <vPortValidateInterruptPriority+0x60>
	}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	e000e3f0 	.word	0xe000e3f0
 800821c:	200003ec 	.word	0x200003ec
 8008220:	e000ed0c 	.word	0xe000ed0c
 8008224:	200003f0 	.word	0x200003f0

08008228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	; 0x28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008234:	f7ff faa2 	bl	800777c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008238:	4b5b      	ldr	r3, [pc, #364]	; (80083a8 <pvPortMalloc+0x180>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008240:	f000 f920 	bl	8008484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008244:	4b59      	ldr	r3, [pc, #356]	; (80083ac <pvPortMalloc+0x184>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	f040 8093 	bne.w	8008378 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01d      	beq.n	8008294 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008258:	2208      	movs	r2, #8
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b00      	cmp	r3, #0
 8008268:	d014      	beq.n	8008294 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	3308      	adds	r3, #8
 8008272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <pvPortMalloc+0x6c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	617b      	str	r3, [r7, #20]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d06e      	beq.n	8008378 <pvPortMalloc+0x150>
 800829a:	4b45      	ldr	r3, [pc, #276]	; (80083b0 <pvPortMalloc+0x188>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d869      	bhi.n	8008378 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082a4:	4b43      	ldr	r3, [pc, #268]	; (80083b4 <pvPortMalloc+0x18c>)
 80082a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082a8:	4b42      	ldr	r3, [pc, #264]	; (80083b4 <pvPortMalloc+0x18c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ae:	e004      	b.n	80082ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d903      	bls.n	80082cc <pvPortMalloc+0xa4>
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1f1      	bne.n	80082b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082cc:	4b36      	ldr	r3, [pc, #216]	; (80083a8 <pvPortMalloc+0x180>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d050      	beq.n	8008378 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2208      	movs	r2, #8
 80082dc:	4413      	add	r3, r2
 80082de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	1ad2      	subs	r2, r2, r3
 80082f0:	2308      	movs	r3, #8
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d91f      	bls.n	8008338 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4413      	add	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <pvPortMalloc+0xf8>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	613b      	str	r3, [r7, #16]
}
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	1ad2      	subs	r2, r2, r3
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008332:	69b8      	ldr	r0, [r7, #24]
 8008334:	f000 f908 	bl	8008548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008338:	4b1d      	ldr	r3, [pc, #116]	; (80083b0 <pvPortMalloc+0x188>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	4a1b      	ldr	r2, [pc, #108]	; (80083b0 <pvPortMalloc+0x188>)
 8008344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008346:	4b1a      	ldr	r3, [pc, #104]	; (80083b0 <pvPortMalloc+0x188>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <pvPortMalloc+0x190>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d203      	bcs.n	800835a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008352:	4b17      	ldr	r3, [pc, #92]	; (80083b0 <pvPortMalloc+0x188>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <pvPortMalloc+0x190>)
 8008358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	4b13      	ldr	r3, [pc, #76]	; (80083ac <pvPortMalloc+0x184>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	431a      	orrs	r2, r3
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <pvPortMalloc+0x194>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a11      	ldr	r2, [pc, #68]	; (80083bc <pvPortMalloc+0x194>)
 8008376:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008378:	f7ff fa0e 	bl	8007798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <pvPortMalloc+0x174>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60fb      	str	r3, [r7, #12]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <pvPortMalloc+0x172>
	return pvReturn;
 800839c:	69fb      	ldr	r3, [r7, #28]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3728      	adds	r7, #40	; 0x28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20006af4 	.word	0x20006af4
 80083ac:	20006b08 	.word	0x20006b08
 80083b0:	20006af8 	.word	0x20006af8
 80083b4:	20006aec 	.word	0x20006aec
 80083b8:	20006afc 	.word	0x20006afc
 80083bc:	20006b00 	.word	0x20006b00

080083c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d04d      	beq.n	800846e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083d2:	2308      	movs	r3, #8
 80083d4:	425b      	negs	r3, r3
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4413      	add	r3, r2
 80083da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	4b24      	ldr	r3, [pc, #144]	; (8008478 <vPortFree+0xb8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4013      	ands	r3, r2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <vPortFree+0x44>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	60fb      	str	r3, [r7, #12]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <vPortFree+0x62>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60bb      	str	r3, [r7, #8]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	4b14      	ldr	r3, [pc, #80]	; (8008478 <vPortFree+0xb8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01e      	beq.n	800846e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d11a      	bne.n	800846e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <vPortFree+0xb8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008448:	f7ff f998 	bl	800777c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <vPortFree+0xbc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4413      	add	r3, r2
 8008456:	4a09      	ldr	r2, [pc, #36]	; (800847c <vPortFree+0xbc>)
 8008458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800845a:	6938      	ldr	r0, [r7, #16]
 800845c:	f000 f874 	bl	8008548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008460:	4b07      	ldr	r3, [pc, #28]	; (8008480 <vPortFree+0xc0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	4a06      	ldr	r2, [pc, #24]	; (8008480 <vPortFree+0xc0>)
 8008468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800846a:	f7ff f995 	bl	8007798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800846e:	bf00      	nop
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20006b08 	.word	0x20006b08
 800847c:	20006af8 	.word	0x20006af8
 8008480:	20006b04 	.word	0x20006b04

08008484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800848a:	f246 63f8 	movw	r3, #26360	; 0x66f8
 800848e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008490:	4b27      	ldr	r3, [pc, #156]	; (8008530 <prvHeapInit+0xac>)
 8008492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00c      	beq.n	80084b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3307      	adds	r3, #7
 80084a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0307 	bic.w	r3, r3, #7
 80084aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <prvHeapInit+0xac>)
 80084b4:	4413      	add	r3, r2
 80084b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084bc:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <prvHeapInit+0xb0>)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <prvHeapInit+0xb0>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	4413      	add	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084d0:	2208      	movs	r2, #8
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0307 	bic.w	r3, r3, #7
 80084de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a15      	ldr	r2, [pc, #84]	; (8008538 <prvHeapInit+0xb4>)
 80084e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084e6:	4b14      	ldr	r3, [pc, #80]	; (8008538 <prvHeapInit+0xb4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ee:	4b12      	ldr	r3, [pc, #72]	; (8008538 <prvHeapInit+0xb4>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008504:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <prvHeapInit+0xb4>)
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	4a0a      	ldr	r2, [pc, #40]	; (800853c <prvHeapInit+0xb8>)
 8008512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	4a09      	ldr	r2, [pc, #36]	; (8008540 <prvHeapInit+0xbc>)
 800851a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800851c:	4b09      	ldr	r3, [pc, #36]	; (8008544 <prvHeapInit+0xc0>)
 800851e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008522:	601a      	str	r2, [r3, #0]
}
 8008524:	bf00      	nop
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	200003f4 	.word	0x200003f4
 8008534:	20006aec 	.word	0x20006aec
 8008538:	20006af4 	.word	0x20006af4
 800853c:	20006afc 	.word	0x20006afc
 8008540:	20006af8 	.word	0x20006af8
 8008544:	20006b08 	.word	0x20006b08

08008548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008550:	4b28      	ldr	r3, [pc, #160]	; (80085f4 <prvInsertBlockIntoFreeList+0xac>)
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	e002      	b.n	800855c <prvInsertBlockIntoFreeList+0x14>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	429a      	cmp	r2, r3
 8008564:	d8f7      	bhi.n	8008556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	4413      	add	r3, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d108      	bne.n	800858a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	441a      	add	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	441a      	add	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d118      	bne.n	80085d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <prvInsertBlockIntoFreeList+0xb0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d00d      	beq.n	80085c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	441a      	add	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e008      	b.n	80085d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085c6:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <prvInsertBlockIntoFreeList+0xb0>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	e003      	b.n	80085d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d002      	beq.n	80085e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20006aec 	.word	0x20006aec
 80085f8:	20006af4 	.word	0x20006af4

080085fc <__libc_init_array>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	4d0d      	ldr	r5, [pc, #52]	; (8008634 <__libc_init_array+0x38>)
 8008600:	4c0d      	ldr	r4, [pc, #52]	; (8008638 <__libc_init_array+0x3c>)
 8008602:	1b64      	subs	r4, r4, r5
 8008604:	10a4      	asrs	r4, r4, #2
 8008606:	2600      	movs	r6, #0
 8008608:	42a6      	cmp	r6, r4
 800860a:	d109      	bne.n	8008620 <__libc_init_array+0x24>
 800860c:	4d0b      	ldr	r5, [pc, #44]	; (800863c <__libc_init_array+0x40>)
 800860e:	4c0c      	ldr	r4, [pc, #48]	; (8008640 <__libc_init_array+0x44>)
 8008610:	f000 f820 	bl	8008654 <_init>
 8008614:	1b64      	subs	r4, r4, r5
 8008616:	10a4      	asrs	r4, r4, #2
 8008618:	2600      	movs	r6, #0
 800861a:	42a6      	cmp	r6, r4
 800861c:	d105      	bne.n	800862a <__libc_init_array+0x2e>
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	f855 3b04 	ldr.w	r3, [r5], #4
 8008624:	4798      	blx	r3
 8008626:	3601      	adds	r6, #1
 8008628:	e7ee      	b.n	8008608 <__libc_init_array+0xc>
 800862a:	f855 3b04 	ldr.w	r3, [r5], #4
 800862e:	4798      	blx	r3
 8008630:	3601      	adds	r6, #1
 8008632:	e7f2      	b.n	800861a <__libc_init_array+0x1e>
 8008634:	080087ec 	.word	0x080087ec
 8008638:	080087ec 	.word	0x080087ec
 800863c:	080087ec 	.word	0x080087ec
 8008640:	080087f0 	.word	0x080087f0

08008644 <memset>:
 8008644:	4402      	add	r2, r0
 8008646:	4603      	mov	r3, r0
 8008648:	4293      	cmp	r3, r2
 800864a:	d100      	bne.n	800864e <memset+0xa>
 800864c:	4770      	bx	lr
 800864e:	f803 1b01 	strb.w	r1, [r3], #1
 8008652:	e7f9      	b.n	8008648 <memset+0x4>

08008654 <_init>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	bf00      	nop
 8008658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865a:	bc08      	pop	{r3}
 800865c:	469e      	mov	lr, r3
 800865e:	4770      	bx	lr

08008660 <_fini>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr
